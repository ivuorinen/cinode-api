/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/v0.1/companies/{companyId}/users/{companyUserId}/absences/{id}": {
    /** Get absence period by id */
    get: operations["Absence"];
    /** Update Absence Item for User */
    put: operations["UpdateAbsence"];
    /** Delete absence */
    delete: operations["DeleteAbsence"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/absences": {
    /** Get absence period by company user id */
    get: operations["Absences"];
    /** Create Absence Item for User */
    post: operations["NewAbsence"];
  };
  "/v0.1/companies/{companyId}/absence/types": {
    /** Get absence types for company */
    get: operations["AbsenceTypes"];
  };
  "/v0.1/companies/{companyId}/availability": {
    /** Get availability for company users. Omitting companyUserId gets availability for all company users in company. */
    post: operations["SearchAvailability"];
  };
  "/v0.1/companies/{companyId}": {
    /** Get company by id */
    get: operations["Company"];
  };
  "/v0.1/companies/{companyId}/addresses/{id}/users": {
    /** Get company users list for an address */
    get: operations["CompanyAddressUsers"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}": {
    /**
     * Get Candidate by Id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["Candidate"];
    /**
     * Delete candidate from the system
     * This action is irreversible, use with caution
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    delete: operations["DeleteCompanyCandidate"];
    /**
     * Patch company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    patch: operations["PatchCompanyCandidate"];
  };
  "/v0.1/companies/{companyId}/candidates": {
    /**
     * Get Candidates
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["Candidates"];
    /**
     * Create Candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["AddCompanyCandidate"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}/invite": {
    /**
     * Invite the CompanyCandidate to create their own Cinode account
     * A email is sent with your message and details for how to login
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["InviteCandidate"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/{id}": {
    /**
     * Get company candidates event by id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateEvent"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/meetings/{id}": {
    /**
     * Get company candidates meeting event with specified id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateEventMeeting"];
    /**
     * Update meeting event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    put: operations["UpdateCompanyCandidateEventMeeting"];
    /**
     * Delete company candidate meeting event
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    delete: operations["DeleteCompanyCandidateEventMeeting"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/meetings": {
    /**
     * Get company candidates events meetings list
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateMeetingEventList"];
    /**
     * Add new meeting event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["NewCompanyCandidateEventMeeting"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/notes/{id}": {
    /**
     * Get company candidates note event with specified id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateEventNote"];
    /**
     * Update note event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    put: operations["UpdateCompanyCandidateEventNote"];
    /**
     * Delete company candidate note event
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    delete: operations["DeleteCompanyCandidateEventNote"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/notes": {
    /**
     * Get company candidates events notes list
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateNoteEventList"];
    /**
     * Add new note event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["NewCompanyCandidateEventNote"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events": {
    /**
     * Get company candidates events list
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateEvents"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/tasks/{id}": {
    /**
     * Get company candidates task event with specified id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateEventTask"];
    /**
     * Update task event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    put: operations["UpdateCompanyCandidateEventTask"];
    /**
     * Delete company candidate task event
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    delete: operations["DeleteCompanyCandidateEventTask"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/events/tasks": {
    /**
     * Get company candidates events tasks list
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CompanyCandidateTaskEventList"];
    /**
     * Add new task event for company candidate
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["NewCompanyCandidateEventTask"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}/attachments/{attachmentId}": {
    /**
     * Get Candidate File Attachment by Id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["GetCandidateAttachment"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}/attachments": {
    /**
     * Upload Candidate File Attachment
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["CandidateAttachment"];
  };
  "/v0.1/companies/{companyId}/candidates/pipelines": {
    /**
     * Get candidate pipelines
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["CandidatePipelines"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/skills": {
    /**
     * Add a Skill to company candidate
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/candidates/19870/skills
     *     {
     *         "name": "SQL",
     *         "companyCandidateId": 19870,
     *         "keywordSynonymId": 577,
     *         "languageId":1
     *     }
     */
    post: operations["NewCompanyCandidateSkill"];
  };
  "/v0.1/companies/{companyId}/candidates/{candidateId}/skills/{id}": {
    /**
     * Delete Candidate Skill
     * @description Sample request:
     *
     *     DELETE /v0.1/companies/1/candidates/19870/skills/577
     */
    delete: operations["DeleteCompanyCandidateSkill"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}/uriattachments": {
    /**
     * Add Candidate Uri (Link)
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    post: operations["CandidateUriAttachment"];
  };
  "/v0.1/companies/{companyId}/candidates/{id}/uriattachments/{attachmentId}": {
    /**
     * Get Candidate Uri Attachment by Id
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["GetCandidateUriAttachment"];
    /**
     * Delete Candidate Uri (Link)
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    delete: operations["DeleteCandidateUriAttachment"];
  };
  "/v0.1/companies/{companyId}/capabilities": {
    /** Get company capabilities */
    get: operations["CompanyCapabilities"];
  };
  "/v0.1/companies/{companyId}/currencies": {
    /** Get company currencies */
    get: operations["CompanyCurrencies"];
  };
  "/v0.1/companies/{companyId}/customers/{id}": {
    /**
     * Get company customer by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["GetCompanyCustomer"];
    /**
     * Update company customer
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["UpdateCompanyCustomer"];
    /**
     * Delete customer
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteCompanyCustomer"];
    /**
     * Patch company customer
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    patch: operations["PatchCompanyCustomer"];
  };
  "/v0.1/companies/{companyId}/customers": {
    /**
     * Get company customers list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomers"];
    /**
     * Add company customer
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewCompanyCustomer"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/addresses/{id}": {
    /**
     * Get customer address by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CustomerAddress"];
    /**
     * Update customer address
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["EditCompanyCustomerAddress"];
    /**
     * Delete customer address
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteCompanyCustomerAddress"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/addresses": {
    /**
     * Add customer address
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewCompanyCustomerAddress"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/contacts/{id}": {
    /**
     * Get customer contact by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["Contact"];
    /**
     * Update customer contact
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["EditCompanyCustomerContact"];
    /**
     * Delete customer contact
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteCompanyCustomerContact"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/contacts": {
    /**
     * Get customer contact list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["Contacts"];
    /**
     * Add customer contact
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewCompanyCustomerContact"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/contacts/{contactId}/tags": {
    /**
     * Edit Tags for CustomerContact
     * @description Note:
     *
     *     Posted tags will replace any existing tags for the contact.
     *     A new tag will be created if the Id for a tag is not provided.
     *
     * Sample request:
     *
     *     POST /v0.1/companies/1/customers/19870/contacts/5360/tags
     *     [
     *         {
     *             "name": "tag-name",
     *             "id": 2
     *         },
     *         {
     *             "name": "tag-test",
     *             "id": 1
     *         },
     *     ]
     */
    post: operations["EditCustomerContactTags"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/{id}": {
    /**
     * Get customer event by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEvent"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events": {
    /**
     * Get customer events list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEvents"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/meetings/{id}": {
    /**
     * Get customer event meeting by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventMeeting"];
    /**
     * Update customer event meeting
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["UpdateMeeting"];
    /**
     * Delete customer event meeting
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteMeeting"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/meetings": {
    /**
     * Get customer event meetings list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventMeetings"];
    /**
     * Add customer event meeting
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewMeeting"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/notes/{id}": {
    /**
     * Get customer event note by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventNote"];
    /**
     * Update customer event note
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["UpdateNote"];
    /**
     * Delete customer event note
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteNote"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/notes": {
    /**
     * Get customer event notes list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventNotes"];
    /**
     * Add customer event note
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewNote"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/tasks/{id}": {
    /**
     * Get customer event task by id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventTask"];
    /**
     * Update customer event task
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    put: operations["UpdateTask"];
    /**
     * Delete customer event task
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    delete: operations["DeleteTask"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/events/tasks": {
    /**
     * Get customer event tasks list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerEventTasks"];
    /**
     * Add customer event task
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["NewTask"];
  };
  "/v0.1/companies/{companyId}/customers/{id}/attachments/{attachmentId}": {
    /**
     * Get customer file attachment by Id
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["GetCustomerAttachment"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/managers": {
    /**
     * Get customer managers
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CompanyCustomerManagers"];
    /**
     * Add customer responsible
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/customers/22228/managers
     *     {
     *         [
     *            51096
     *         ]
     *     }
     */
    post: operations["AddCompanyCustomerResponsible"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/managers/{id}": {
    /**
     * Remove customer responsible
     * @description Sample request:
     *
     *     DELETE /v0.1/companies/1/customers/22228/managers/54632
     */
    delete: operations["RemoveCustomerManager"];
  };
  "/v0.1/companies/{companyId}/customers/extended": {
    /**
     * Get extended company customers list
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    get: operations["CustomersExtended"];
  };
  "/v0.1/companies/{companyId}/customers/{customerId}/tags": {
    /**
     * Edit Tags for Customer
     * @description Note:
     *
     *     Posted tags will replace any existing tags for the customer.
     *     A new tag will be created if the Id for a tag is not provided.
     *
     * Sample request:
     *
     *     POST /v0.1/companies/1/customers/19870/tags
     *     [
     *         {
     *             "name": "tag-name",
     *             "id": 2
     *         },
     *         {
     *             "name": "tag-test",
     *             "id": 1
     *         },
     *     ]
     */
    post: operations["EditCustomerTags"];
  };
  "/v0.1/companies/{companyId}/images/{id}": {
    /** Get Company Image by Id */
    get: operations["CompanyImage"];
  };
  "/v0.1/companies/{companyId}/images/{id}/{imageFileName}": {
    /** Download Company Image */
    get: operations["CompanyImageDownload"];
  };
  "/v0.1/companies/{companyId}/users/{id}/images": {
    /** Get Company Images Assigned to User */
    get: operations["CompanyImages"];
    /** Add Image to User */
    post: operations["AddCompanyImage"];
  };
  "/v0.1/companies/{companyId}/managers": {
    /**
     * Get company managers
     * @description Sample request:
     *
     *     GET /v0.1/companies/1/managers
     */
    get: operations["CompanyManagers"];
  };
  "/v0.1/companies/{companyId}/profiles": {
    /**
     * Get profiles list
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/profiles
     *     {
     *         "createdOffsetDays": 90,
     *         "updatedOffsetDays": 30,
     *         "pageAndSortBy": {
     *             "page": 1,
     *             "itemsPerPage": 15,
     *             "order": 0,
     *             "sortBy": 1
     *         }
     *     }
     */
    post: operations["CompanyProfiles"];
  };
  "/v0.1/companies/{companyId}/projects/{id}/attachments/{attachmentId}": {
    /**
     * Get Project file attachment by Id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["GetProjectAttachment"];
  };
  "/v0.1/companies/{companyId}/recruitment/managers": {
    /**
     * Get recruitment managers
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["RecruitmentManagers"];
  };
  "/v0.1/companies/{companyId}/resumes": {
    /**
     * Get resumes list
     * @description Requires module: CompanyUserResume.
     */
    get: operations["CompanyResumes"];
  };
  "/v0.1/companies/{companyId}/subcontractors/groups/{subcontractorGroupId}": {
    /**
     * Get Subcontractor Group by Id
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["GetCompanySubcontractorGroup"];
  };
  "/v0.1/companies/{companyId}/subcontractors/groups/{subcontractorGroupId}/members": {
    /**
     * Add subcontractor group member
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["AddCompanySubcontractorGroupMember"];
  };
  "/v0.1/companies/{companyId}/subcontractors/groups/{subcontractorGroupId}/members/{id}": {
    /**
     * Delete subcontractor group member
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    delete: operations["DeleteCompanySubcontractorGroupMember"];
  };
  "/v0.1/companies/{companyId}/subcontractors/groups": {
    /**
     * Get Subcontractor Groups by Company Id
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["GetCompanySubcontractorGroups"];
  };
  "/v0.1/companies/{companyId}/tags/{id}": {
    /**
     * Get company tag by Id
     * @description Sample request:
     *
     *     GET /v0.1/companies/1/tags/1
     */
    get: operations["CompanyTag"];
  };
  "/v0.1/companies/{companyId}/tags": {
    /**
     * Get company tags
     * @description Sample request:
     *
     *     GET /v0.1/companies/1/tags
     */
    get: operations["CompanyTags"];
  };
  "/v0.1/companies/{companyId}/teams/{id}": {
    /** Get team by id */
    get: operations["Team"];
    /**
     * Update team
     * @description Requires access level: CompanyAdmin.
     */
    put: operations["UpdateTeam"];
  };
  "/v0.1/companies/{companyId}/teams": {
    /** Get teams list */
    get: operations["CompanyTeams"];
    /**
     * Add team
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["NewTeam"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/managers": {
    /** Get team managers */
    get: operations["TeamManagers"];
    /**
     * Add team manager
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/teams/1234/managers
     *     {
     *         "teamId" : 1234,
     *         "companyUserId" : 54632
     *     }
     */
    post: operations["AddTeamManager"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/managers/{id}": {
    /**
     * Remove team manager
     * @description Sample request:
     *
     *     DELETE /v0.1/companies/1/teams/1234/managers/54632
     */
    delete: operations["RemoveTeamManager"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/members/{id}": {
    /** Get team member */
    get: operations["GetTeamMember"];
    /**
     * Update team member
     * @description Requires access level: CompanyAdmin.
     */
    put: operations["UpdateTeamMember"];
    /**
     * Remove team member
     * @description Requires access level: CompanyAdmin.
     */
    delete: operations["RemoveTeamMember"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/members": {
    /** Get team members */
    get: operations["GetTeamMembers"];
    /**
     * Add team member
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["AddTeamMember"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/members/{id}/move": {
    /**
     * Move team member and associated bookings to another team
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["MoveTeamMember"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/users": {
    /**
     * Get team members
     * @deprecated
     */
    get: operations["GetTeamUsers"];
    /**
     * Add team member
     * @deprecated
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["AddTeamUser"];
  };
  "/v0.1/companies/{companyId}/teams/{teamId}/users/{id}": {
    /**
     * Remove team member
     * @deprecated
     * @description Requires access level: CompanyAdmin.
     */
    delete: operations["RemoveTeamUser"];
  };
  "/v0.1/companies/{companyId}/users/{id}": {
    /** Get company user by id */
    get: operations["User"];
    /**
     * Update company user
     * @description Requires access level: CompanyAdmin.
     */
    put: operations["UpdateCompanyUser"];
    /**
     * Delete user from the system
     * Firstly, the user has to be disconnected, which can be done through a PATCH or PUT
     * This action is irreversible, use with caution
     * @description Requires access level: CompanyAdmin.
     */
    delete: operations["DeleteCompanyUser"];
    /**
     * Patch company user
     * @description Requires access level: CompanyAdmin.
     */
    patch: operations["PatchCompanyUser"];
  };
  "/v0.1/companies/{companyId}/users": {
    /** Get company users list */
    get: operations["CompanyUsers"];
    /**
     * Add company user employee
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["AddCompanyUser"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/convert-aad": {
    /**
     * Convert company user employee to an AAD account
     * @description Requires access level: CompanyAdmin.
     */
    post: operations["ConvertUserToAadAccount"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/{id}": {
    /**
     * Get employee event
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEvent"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/meetings/{id}": {
    /**
     * Get employee meeting event
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventMeeting"];
    /**
     * Updates employee meeting event
     * @description Requires access level: CompanyManager.
     */
    put: operations["UpdateCompanyUserEmployeeEventMeeting"];
    /**
     * Deletes meeting event
     * @description Requires access level: CompanyManager.
     */
    delete: operations["DeleteCompanyUserEmployeeEventMeeting"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/meetings": {
    /**
     * Get employee meetings events list
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventMeetingList"];
    /**
     * Creates new employee meeting event
     * @description Requires access level: CompanyManager.
     */
    post: operations["NewCompanyUserEmployeeEventMeeting"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/notes/{id}": {
    /**
     * Get employee note event
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventNote"];
    /**
     * Updates employee note event
     * @description Requires access level: CompanyManager.
     */
    put: operations["UpdateCompanyUserEmployeeEventNote"];
    /**
     * Deletes meeting event
     * @description Requires access level: CompanyManager.
     */
    delete: operations["DeleteCompanyUserEmployeeEventNote"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/notes": {
    /**
     * Get employee notes events list
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventNoteList"];
    /**
     * Creates new employee note event
     * @description Requires access level: CompanyManager.
     */
    post: operations["NewCompanyUserEmployeeEventNote"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events": {
    /**
     * Get employee events list
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEvents"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/tasks": {
    /**
     * Get employee tasks events list
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventTaskList"];
    /**
     * Creates new employee task event
     * @description Requires access level: CompanyManager.
     */
    post: operations["NewCompanyUserEmployeeEventTask"];
  };
  "/v0.1/companies/{companyId}/employees/{companyUserId}/events/tasks/{id}": {
    /**
     * Get employee task event
     * @description Requires access level: CompanyManager.
     */
    get: operations["CompanyUserEmployeeEventTask"];
    /**
     * Updates employee's task event
     * @description Requires access level: CompanyManager.
     */
    put: operations["UpdateCompanyUserEmployeeEventTask"];
    /**
     * Deletes meeting event
     * @description Requires access level: CompanyManager.
     */
    delete: operations["DeleteCompanyUserEmployeeEventTask"];
  };
  "/v0.1/companies/{companyId}/users-full/{id}": {
    /**
     * Get company user, including financial fields, by id
     * @description Requires access level: CompanyAdmin.
     */
    get: operations["UserFull"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/permissions": {
    /**
     * Update Permissions for Company User
     * @description Requires access level: CompanyAdmin.
     */
    put: operations["UpdatePermissions"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile": {
    /** Get profile by company user id */
    get: operations["CompanyUserProfile"];
    /** Create Profile for user */
    post: operations["NewCompanyUserProfile"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/commitments/{id}": {
    /** Get profile commitment by id */
    get: operations["CompanyUserProfileCommitment"];
    /** Update Profile Commitment */
    put: operations["UpdateCompanyUserProfileCommitment"];
    /** Delete Commitment */
    delete: operations["DeleteCompanyUserProfileCommitment"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/commitments": {
    /** Create Profile Commitment */
    post: operations["NewCompanyUserProfileCommitment"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/educations/{id}": {
    /** Get profile education by id */
    get: operations["CompanyUserProfileEducation"];
    /** Update Profile Education */
    put: operations["UpdateCompanyUserProfileEducation"];
    /** Delete Profile Education */
    delete: operations["DeleteCompanyUserProfileEducation"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/educations": {
    /** Create Profile Education */
    post: operations["NewCompanyUserProfileEducation"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/employers/{id}": {
    /** Get profile employer by id */
    get: operations["CompanyUserProfileEmployer"];
    /** Update Profile Employer */
    put: operations["UpdateCompanyUserProfileEmployer"];
    /** Delete Profile Employer */
    delete: operations["DeleteCompanyUserProfileEmployer"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/employers": {
    /** Create Employer profile item */
    post: operations["NewCompanyUserProfileEmployer"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/extskills/{id}": {
    /** Get profile external skill by id */
    get: operations["CompanyUserProfileExtSkill"];
    /** Update Extra Skill Profile Item */
    put: operations["UpdateCompanyUserProfileExtSkill"];
    /** Delete Extra Skill Profile Item */
    delete: operations["DeleteCompanyUserProfileExtSkill"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/extskills": {
    /** Create Extra Skill Profile Item */
    post: operations["NewCompanyUserProfileExtSkill"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/languages/{id}": {
    /** Get profile language by id */
    get: operations["CompanyUserProfileLanguage"];
    /** Update Language Profile Item */
    put: operations["UpdateCompanyUserProfileLanguage"];
    /** Delete Language Profile Item */
    delete: operations["DeleteCompanyUserProfileLanguage"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/languages": {
    /** Create Language Profile Item */
    post: operations["NewCompanyUserProfileLanguage"];
  };
  "/v0.1/languages": {
    /** Get Available Profile Languages */
    get: operations["ProfileLanguages"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/presentation": {
    /** Get profile presentation */
    get: operations["CompanyUserProfilePresentation"];
    /** Edit Profile Presentation */
    put: operations["UpdateCompanyUserProfilePresentation"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/references/{id}": {
    /** Get profile reference by id */
    get: operations["CompanyUserProfileReference"];
    /** Update Profile Reference Item */
    put: operations["UpdateCompanyUserProfileReference"];
    /** Delete Profile Reference Item */
    delete: operations["DeleteCompanyUserProfileReference"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/references": {
    /** Create Profile Reference Item */
    post: operations["NewCompanyUserProfileReference"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profiles": {
    /** Get profiles list */
    get: operations["CompanyUserProfiles"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/skills/{id}": {
    /** Get profile skill by id */
    get: operations["CompanyUserProfileSkill"];
    /** Update Profile Skill */
    put: operations["UpdateCompanyUserProfileSkill"];
    /** Delete Profile Skill */
    delete: operations["DeleteCompanyUserProfileSkill"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/skills": {
    /** Add Skill to profile */
    post: operations["NewCompanyUserProfileSkill"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/trainings/{id}": {
    /** Get profile training by id */
    get: operations["CompanyUserProfileTraining"];
    /** Update Profile Training Item */
    put: operations["UpdateCompanyUserProfileTraining"];
    /** Delete Profile Training Item */
    delete: operations["DeleteCompanyUserProfileTraining"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/trainings": {
    /** Create Profile Training Item */
    post: operations["NewCompanyUserProfileTraining"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/workexperiences/{id}": {
    /** Get profile work experience by id */
    get: operations["CompanyUserProfileWorkExperience"];
    /** Update Profile Work Experience */
    put: operations["UpdateCompanyUserProfileWorkExperience"];
    /** Delete Profile Work Experience Item */
    delete: operations["DeleteCompanyUserProfileWorkExperience"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/profile/workexperiences": {
    /** Create WorkExperience Profile Item */
    post: operations["NewCompanyUserProfileWorkExperience"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/resumes/{id}": {
    /**
     * Get resume by id
     * @description Requires module: CompanyUserResume.
     */
    get: operations["Resume"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/resumes": {
    /**
     * Get company user resumes list
     * @description Requires module: CompanyUserResume.
     */
    get: operations["CompanyUserResumes"];
  };
  "/v0.1/companies/{companyId}/users/{id}/roles": {
    /**
     * Get Roles for CompanyUser by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["CompanyUserRoles"];
  };
  "/v0.1/companies/{companyId}/users/extended": {
    /** Get extended company users list */
    get: operations["CompanyUsersExtended"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/skills/{id}": {
    /** Get skill by id */
    get: operations["Skill"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/skills": {
    /** Get skills list */
    get: operations["Skills"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{id}": {
    /**
     * Get company user by id
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanySubcontractor"];
    /**
     * Delete subcontractor from the system
     * This action is irreversible, use with caution
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    delete: operations["DeleteCompanySubcontractor"];
  };
  "/v0.1/companies/{companyId}/subcontractors": {
    /**
     * Get subcontractors list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractors"];
    /**
     * Add subcontractor
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["AddCompanyUserSubcontractor"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/{id}": {
    /**
     * Get subcontractors events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEvent"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/meetings/{id}": {
    /**
     * Get subcontractor meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventMeeting"];
    /**
     * Updates subcontractor meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    put: operations["UpdateCompanyUserSubcontractorEventMeeting"];
    /**
     * Deletes meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    delete: operations["DeleteCompanyUserSubcontractorEventMeeting"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/meetings": {
    /**
     * Get subcontractors meetings events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventMeetingList"];
    /**
     * Creates new subcontractor meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["NewCompanyUserSubcontractorEventMeeting"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/notes/{id}": {
    /**
     * Get subcontractors notes events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventNote"];
    /**
     * Updates subcontractor note event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    put: operations["UpdateCompanyUserSubcontractorEventNote"];
    /**
     * Deletes meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    delete: operations["DeleteCompanyUserSubcontractorEventNote"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/notes": {
    /**
     * Get subcontractors notes events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventsNotes"];
    /**
     * Creates new subcontractors note event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["NewCompanyUserSubcontractorEventNote"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{subcontractorId}/events": {
    /**
     * Get subcontractors events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEvents"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/tasks": {
    /**
     * Get subcontractors tasks events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventsTasks"];
    /**
     * Creates new subcontractor task event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["NewCompanyUserSubcontractorEventTask"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{companyUserId}/events/tasks/{id}": {
    /**
     * Get subcontractors tasks events list
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["CompanyUserSubcontractorEventTask"];
    /**
     * Updates subcontractor task event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    put: operations["UpdateCompanyUserSubcontractorEventTask"];
    /**
     * Deletes meeting event
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    delete: operations["DeleteCompanyUserSubcontractorEventTask"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{id}/attachments/{attachmentId}": {
    /**
     * Get subcontractor File Attachment by Id
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    get: operations["GetSubcontractorAttachment"];
  };
  "/v0.1/companies/{companyId}/subcontractors/{id}/attachments": {
    /**
     * Upload subcontractor file attachment
     * @description Requires access level: PartnerManager. Requires module: Partners.
     */
    post: operations["SubcontractorAttachment"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/tags": {
    /**
     * Edit Tags for User
     * @description Note:
     *
     *     Posted tags will replace any existing tags for the user.
     *     A new tag will be created if the id for a tag is not provided.
     *
     * Sample request:
     *
     *     POST /v0.1/companies/1/users/19870/tags
     *     [
     *         {
     *             "name": "tag-name",
     *             "id": 2
     *         },
     *         {
     *             "name": "tag-new",
     *         },
     *     ]
     */
    post: operations["EditCompanyUserTags"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/teams": {
    /** Get teams for team member */
    get: operations["UserTeams"];
  };
  "/v0.1/companies/{companyId}/webhooks": {
    /**
     * Get company webhooks
     * @description Sample request:
     *
     *     GET /v0.1/companies/1/webhooks
     */
    get: operations["CompanyWebhooks"];
    /**
     * Add Webhook
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/webhooks
     *     {
     *         "isActive": false,
     *         "endpointUrl": "https://webhook.site/7a619ffb-e67c-41fc-8113-083d6013f76c",
     *         "configurations": [
     *             {
     *                 "entityType": 1,
     *                 "actionType": 1
     *             }
     *         ],
     *         "credentials": [
     *             {
     *                 "isBasicAuthentication": true,
     *                 "headerName": "user",
     *                 "headerValue": "somevalue"
     *             }
     *         ]
     *     }
     */
    post: operations["NewWebhook"];
  };
  "/v0.1/companies/{companyId}/webhooks/manifest": {
    /** @description Requires access level: CompanyAdmin. Requires module: Webhooks. */
    post: operations["InstallWebhookManifest"];
  };
  "/v0.1/companies/{companyId}/webhooks/{id}": {
    /**
     * Remove webhook
     * @description Sample request:
     *
     *     DELETE /v0.1/companies/1/webhooks/42a3a220-766c-eb11-8e13-000c29b4e92f
     */
    delete: operations["RemoveWebhook"];
  };
  "/v0.1/companies/{companyId}/users/{companyUserId}/resumes/{id}/dynamic": {
    /**
     * Get resume by id
     * @description Requires module: CompanyUserResume.
     */
    get: operations["DynamicResume"];
  };
  "/v0.1/companies/{companyId}/keywords/search/{term}": {
    /** Search keywords by term */
    get: operations["SearchKeyword"];
  };
  "/v0.1/companies/{companyId}/mentions/to-natural-text": {
    /**
     * Translates any mention-ids in a text to their human readable form.
     * Translations are access restricted, if you don't have enough access
     * to get the name of an id, it won't be translated.
     */
    post: operations["TranslateMentions"];
  };
  "/v0.1/companies/{companyId}/partners": {
    /**
     * Get Partners by filter
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["SearchPartners"];
  };
  "/v0.1/companies/{companyId}/projects/{id}": {
    /**
     * Get project by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["Project"];
    /**
     * Update project
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateCompanyProject"];
    /**
     * Delete project
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteCompanyProject"];
  };
  "/v0.1/companies/{companyId}/projects": {
    /**
     * Get projects list  - please note this endpoint currently only returns projects with the status WON. Please use the SearchProjects endpoint for more options of filtering desired Projects
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["Projects"];
    /**
     * Add project
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["NewCompanyProject"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/projectassignments/{id}": {
    /**
     * Get projectassignment by id (Obsolete)
     * @deprecated
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["OldProjectAssignment"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{id}": {
    /**
     * Get Role by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectAssignment"];
    /**
     * Edit Role
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectAssignment"];
    /**
     * Delete Role
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectAssignment"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles": {
    /**
     * Add Role
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["NewProjectAssignment"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{projectAssignmentId}/announce": {
    /**
     * Announce a role (ProjectAssignment) to the Partner Network and optionally also to Cinode Market(https://cinode.market/requests).
     * If you are testing, set the "PublishForReal" to "false", otherwise you will publish this announcement for real. When you're testing ("PublishForReal = false) RequestId will be 0 in the response.
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["AnnounceProjectAssignment"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/members/employee": {
    /**
     * Add Role Member Employee
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["AddProjectAssignmentMemberEmployee"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/members/subcontractor": {
    /**
     * Add Role Member Subcontractor
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["AddProjectAssignmentMemberSubcontractor"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/members/employee/{id}": {
    /**
     * Edit Role Member Employee
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectAssignmentMemberEmployee"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/members/subcontractor/{id}": {
    /**
     * Edit Role Member Subcontractor
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectAssignmentMemberSubcontractor"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/members/{id}": {
    /**
     * Delete Role Member
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectAssignmentMemberEmployee"];
  };
  "/v0.1/companies/{companyId}/roles": {
    /**
     * Get Roles by Filter
     * Rate limited, restricted to once per minute, max 1000 requests per day
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["SearchRoles"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/skills": {
    /**
     * Add Role Skill
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["AddProjectAssignmentSkill"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/roles/{roleId}/skills/{id}": {
    /**
     * Update Role Skill
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectAssignmentSkill"];
    /**
     * Delete Role Skill
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectAssignmentSkill"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/{id}": {
    /**
     * Get project event by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEvent"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events": {
    /**
     * Get project events list
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEvents"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/meetings/{id}": {
    /**
     * Get project event meeting by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventMeeting"];
    /**
     * Update project event meeting
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectMeeting"];
    /**
     * Delete project event meeting
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectMeeting"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/meetings": {
    /**
     * Get project events meetings list
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventMeetings"];
    /**
     * Add project event meeting
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["NewProjectMeeting"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/notes/{id}": {
    /**
     * Get project event note by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventNote"];
    /**
     * Update project event note
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectNote"];
    /**
     * Delete project event note
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectNote"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/notes": {
    /**
     * Get project event notes list
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventNotes"];
    /**
     * Add project event note
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["NewProjectNote"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/tasks/{id}": {
    /**
     * Get project event task by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventTask"];
    /**
     * Update project event task
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    put: operations["UpdateProjectTask"];
    /**
     * Delete project event task
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    delete: operations["DeleteProjectTask"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/events/tasks": {
    /**
     * Get project event tasks list
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectEventTasks"];
    /**
     * Add project event task
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    post: operations["NewProjectTask"];
  };
  "/v0.1/companies/{companyId}/projects/pipelines": {
    /**
     * Get project pipelines
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectPipelines"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/references/{id}": {
    /**
     * Get project reference by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectReference"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/references": {
    /**
     * Get project reference by id
     * @description Requires access level: CompanyManager. Requires module: Assignments.
     */
    get: operations["ProjectReferences"];
  };
  "/v0.1/companies/{companyId}/projects/{projectId}/tags": {
    /**
     * Edit Tags for Project
     * @description Note:
     *
     *     Posted tags will replace any existing tags for the project.
     *     A new tag will be created, if the id for a tag not provided.
     *
     * Sample request:
     *
     *     POST /v0.1/companies/1/projects/19870/tags
     *     [
     *         {
     *             "name": "tag-name",
     *             "id": 2
     *         },
     *         {
     *             "name": "tag-test",
     *             "id": 1
     *         },
     *     ]
     */
    post: operations["EditProjectTags"];
  };
  "/v0.1/companies/{companyId}/candidates/recruitment-sources": {
    /**
     * Get recruitment sources
     * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
     */
    get: operations["RecruitmentSources"];
  };
  "/v0.1/companies/{companyId}/candidates/search": {
    /**
     * Get company candidates list from search criteria
     * @description Sample request:
     *
     *     POST /v0.1/companies/1/candidates/search
     *     {
     *         "term": "candidate property value",
     *         "rating": 3
     *         "status": 0,
     *         "sources": [],
     *         "noRecruiter": false,
     *         "recruiters": [],
     *         "states": [0],
     *         "pipeline": null,
     *         "pageAndSortBy": {
     *             "page": 1,
     *             "itemsPerPage": 15
     *         },
     *         "pipelines": []
     *     }
     */
    post: operations["SearchCompanyCandidate"];
  };
  "/v0.1/companies/{companyId}/customers/contacts/search": {
    /**
     * Get company customer contacts list from search criteria
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["SearchCompanyCustomerContact"];
  };
  "/v0.1/companies/{companyId}/customers/search": {
    /**
     * Get company customers list from search criteria
     * @description Requires access level: CompanyManager. Requires module: Customers.
     */
    post: operations["SearchCompanyCustomer"];
  };
  "/v0.1/companies/{companyId}/users/search": {
    /** Get company users list from search criteria */
    post: operations["SearchCompanyUser"];
  };
  "/v0.1/companies/{companyId}/projects/search": {
    /**
     * Get projects list from search criteria
     * @description Sample request
     * {
     *     "pipelines": [4],
     *     "projectStates": [0],
     *     "PageAndSortBy": {
     *     "SortBy": "0",
     *     "SortOrder": "1",
     *     "Page": "1",
     *     "ItemsPerPage": "15",
     *     }
     * }
     * SortBy Parameter can be:
     *     CreatedDateTime=0 // Default
     *     Title=1
     *     Identifier=2
     *     CustomerIdentifier=3
     *     SeoId=4
     *     UpdatedDateTime=6
     *     LastTouchDateTime=7
     */
    post: operations["SearchProject"];
  };
  "/v0.1/companies/{companyId}/skills/search": {
    /** Search users by skill keyword id */
    post: operations["SearchSkill"];
  };
  "/v0.1/companies/{companyId}/skills/search/term": {
    /** Search users with skills by term (string value) */
    post: operations["SearchSkillTerm"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    AbscencePeriodDayModel: {
      calendarDay?: components["schemas"]["CalendarDayModel"] | null;
    };
    AbsenceAddEditModel: {
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end?: string | null;
      /** Format: float */
      extentPercentage: number;
      /** Format: int32 */
      absenceTypeId: number;
    };
    AbsencePeriodDtoModel: {
      /** Format: int32 */
      id?: number;
      absenceType?: components["schemas"]["AbsenceTypeDto"] | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: int32 */
      extentPercentage?: number;
      /** Format: int32 */
      companyUserId?: number;
      companyUserSeoId?: string | null;
      /** Format: int32 */
      companyId?: number;
      companySeoId?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    AbsencePeriodModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyUserId?: number;
      /** Format: int32 */
      absenceTypeId?: number;
      absenceTypeName?: string | null;
      /** Format: int32 */
      id?: number;
      days?: components["schemas"]["AbscencePeriodDayModel"][] | null;
      /** Format: int32 */
      extentPercentage?: number;
    };
    AbsenceTypeDto: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    AbsenceTypeModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * NoAccess = 0
     *
     * Anonymous = 50
     *
     * Read = 100
     *
     * Subcontractor = 110
     *
     * Candidate = 115
     *
     * RestrictedCompanyUser = 150
     *
     * CompanyApiUser = 180
     *
     * CompanyUser = 200
     *
     * PartnerManager = 240
     *
     * CompanyRecruiter = 250
     *
     * TeamManager = 270
     *
     * CompanyManager = 300
     *
     * CompanyAdmin = 400
     *
     * Owner = 500
     * @enum {integer}
     */
    AccessLevel: 0 | 50 | 100 | 110 | 115 | 150 | 180 | 200 | 240 | 250 | 270 | 300 | 400 | 500;
    /**
     * Format: int32
     * @description
     *
     * All = 1
     *
     * Created = 2
     *
     * Updated = 3
     *
     * Borttagen = 4
     * @enum {integer}
     */
    ActionType: 1 | 2 | 3 | 4;
    AddCompanySubcontractorGroupMemberModel: {
      /** Format: int32 */
      companyUserSubcontractorId: number;
    };
    AddressInfoBlockViewModel: {
      displayName?: string | null;
      street1?: string | null;
      street2?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      email?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Övrig = 0
     *
     * Besöksadress = 1
     *
     * Faktureringsadress = 2
     *
     * Placeringsort = 3
     * @enum {integer}
     */
    AddressType: 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @description
     *
     * File = 0
     *
     * Uri = 1
     * @enum {integer}
     */
    AttachmentType: 0 | 1;
    AvailabilityFilterModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
    };
    AvailabilityModel: {
      /** Format: int32 */
      companyUserId?: number;
      /** Format: double */
      availability?: number;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
    };
    CalendarDayModel: {
      /** Format: date-time */
      date?: string;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      month?: number;
      /** Format: int32 */
      day?: number;
      /** Format: int32 */
      weekday?: number;
      /** Format: int32 */
      week?: number;
      /** Format: int32 */
      quarter?: number;
      /** Format: int32 */
      dayOfYear?: number;
    };
    ClassicCompanyUserResumeModel: {
      /** Format: int32 */
      imageId?: number | null;
      /** Format: int32 */
      parentProfileId?: number;
      /** Format: int32 */
      profileTranslationId?: number;
      /** Format: int32 */
      parentCompanyUserResumeId?: number | null;
      resume?: components["schemas"]["ResumeModel"] | null;
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      created?: components["schemas"]["CreatedModel"] | null;
      updated?: components["schemas"]["UpdatedModel"] | null;
      title?: string | null;
      description?: string | null;
      slug?: string | null;
      language?: components["schemas"]["CompanyResumeTemplateLanguageModel"] | null;
      template?: components["schemas"]["CompanyResumeTemplateBaseModel"] | null;
      isPublic?: boolean;
      links?: components["schemas"]["Link"][] | null;
    };
    CommitmentBlockItemModel: {
      url?: string | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    CommitmentBlockModel: {
      data?: components["schemas"]["CommitmentBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    CompanyAddressModel: {
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      id?: number | null;
      street1?: string | null;
      street2?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      email?: string | null;
      /**
       * @description Undefined = 0,
       * StreetAddress = 1 (VisitingAddress)
       * InvoiceAddress = 2,
       * LocationAddress = 3 (Used to connect an Employee to an office registered in Cinode)
       */
      addressType?: components["schemas"]["AddressType"];
      comments?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyBaseModel: {
      /** Format: int32 */
      id?: number | null;
      name?: string | null;
      seoId?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateAddInviteModel: {
      email?: string | null;
      message?: string | null;
    };
    CompanyCandidateAddModel: {
      firstName: string;
      lastName: string;
      gender?: components["schemas"]["UserGender"];
      /** Format: int32 */
      birthYear?: number | null;
      title?: string | null;
      description?: string | null;
      email?: string | null;
      phone?: string | null;
      linkedInUrl?: string | null;
      /** Format: int32 */
      rating?: number | null;
      state: components["schemas"]["CompanyCandidateState"];
      /** Format: date-time */
      availableFromDate?: string | null;
      /** Format: int32 */
      periodOfNoticeDays?: number | null;
      /** Format: int32 */
      salaryRequirement?: number | null;
      isMobile?: boolean;
      /** Format: int32 */
      recruitmentManagerId?: number | null;
      /** Format: int32 */
      pipelineId?: number | null;
      /** Format: int32 */
      pipelineStageId?: number | null;
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      companyAddressId?: number | null;
      /** Format: int32 */
      recruitmentSourceId?: number | null;
      currentEmployer?: string | null;
      campaignCode?: string | null;
      /** Format: int32 */
      currencyId?: number | null;
      /** Format: int32 */
      offeredSalary?: number | null;
      notifyRecruitmentManager?: boolean;
    };
    CompanyCandidateAttachmentModel: {
      /** Format: uuid */
      id?: string;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyCandidateId?: number;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      seoId?: string | null;
      /** @deprecated */
      firstname?: string | null;
      firstName?: string | null;
      /** @deprecated */
      lastname?: string | null;
      lastName?: string | null;
      /** Format: date-time */
      createdDateTime?: string;
      /** Format: date-time */
      lastTouchDateTime?: string | null;
      /** Format: date-time */
      updatedDateTime?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateEventBaseModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateEventMeetingModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      location?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateEventModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateEventNoteModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateEventTaskModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /**
       * @description NotSpecified = 0
       * Phone = 1
       * Email = 2
       */
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateExtendedModel: {
      /** Format: int32 */
      rating?: number | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      /** Format: int32 */
      periodOfNoticeDays?: number | null;
      /** Format: int32 */
      salaryRequirement?: number | null;
      /** Format: int32 */
      offeredSalary?: number | null;
      state?: components["schemas"]["CompanyCandidateState"] | null;
      /** Format: int32 */
      currencyId?: number | null;
      isMobile?: boolean;
      /** Format: int32 */
      pipelineId?: number | null;
      /** Format: int32 */
      pipelineStageId?: number | null;
      /** Format: int32 */
      recruitmentManagerId?: number | null;
      campaignCode?: string | null;
      /**
       * @description Other = 0,
       * Male = 1,
       * Female = 2
       */
      gender?: components["schemas"]["UserGender"];
      /** Format: int32 */
      birthYear?: number | null;
      title?: string | null;
      description?: string | null;
      email?: string | null;
      linkedInUrl?: string | null;
      phone?: string | null;
      attachments?: components["schemas"]["CompanyCandidateAttachmentModel"][] | null;
      recruitmentManager?: components["schemas"]["CompanyUserBaseModel"] | null;
      currentEmployer?: string | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      seoId?: string | null;
      /** @deprecated */
      firstname?: string | null;
      firstName?: string | null;
      /** @deprecated */
      lastname?: string | null;
      lastName?: string | null;
      /** Format: date-time */
      createdDateTime?: string;
      /** Format: date-time */
      lastTouchDateTime?: string | null;
      /** Format: date-time */
      updatedDateTime?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateFileAttachmentListModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /** Format: int32 */
      companyId?: number;
      attachments?: components["schemas"]["CompanyCandidateFileAttachmentModel"][] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidateFileAttachmentModel: {
      fileName?: string | null;
      extension?: string | null;
      /** Format: uuid */
      id?: string;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyCandidateId?: number;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCandidatePipelineModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      stages?: components["schemas"]["CompanyCandidatePipelineStageModel"][] | null;
    };
    CompanyCandidatePipelineStageModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      probability?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * CreatedDateTime = 0
     *
     * FirstName = 1
     *
     * LastName = 2
     *
     * Status = 3
     *
     * Email = 4
     *
     * UpdatedDateTime = 5
     * @enum {integer}
     */
    CompanyCandidateQuerySort: 0 | 1 | 2 | 3 | 4 | 5;
    CompanyCandidateQuerySortPageAndSortByModel: {
      sortBy?: components["schemas"]["CompanyCandidateQuerySort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    CompanyCandidateSkillAddModel: {
      name?: string | null;
      /** Format: int32 */
      companyCandidateId?: number;
      /** Format: int32 */
      keywordSynonymId?: number | null;
      /** Format: int32 */
      languageId?: number | null;
    };
    CompanyCandidateSkillModel: {
      /** Format: int32 */
      companyCandidateId?: number;
      /** Format: int32 */
      keywordId?: number;
      keyword?: components["schemas"]["KeywordModel"] | null;
      /** Format: int32 */
      keywordSynonymId?: number;
      keywordSynonym?: components["schemas"]["KeywordSynonymModel"] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Öppen = 0
     *
     * Vunnen = 10
     *
     * Pausad = 20
     *
     * Avböjd av kandidat = 30
     *
     * Avböjd av oss = 40
     * @enum {integer}
     */
    CompanyCandidateState: 0 | 10 | 20 | 30 | 40;
    CompanyCandidateUriAttachmentAddModel: {
      uri?: string | null;
      title?: string | null;
      description?: string | null;
    };
    CompanyCandidateUriAttachmentModel: {
      uri?: string | null;
      /** Format: uuid */
      id?: string;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyCandidateId?: number;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCapabilitiesModel: {
      enabledModules?: components["schemas"]["CompanyEnabledModuleModel"][] | null;
    };
    CompanyCustomerAddModel: {
      /** @deprecated */
      status?: boolean;
      name: string;
      description?: string | null;
      corporateIdentityNumber?: string | null;
      vatNumber?: string | null;
      identification?: string | null;
      email?: string | null;
      homepage?: string | null;
      phone?: string | null;
      fax?: string | null;
      intermediator?: boolean;
      size?: components["schemas"]["CompanySize"] | null;
      /** Format: int32 */
      countryId?: number | null;
      /** Format: int64 */
      turnOver?: number | null;
      /** Format: int32 */
      turnOverCurrencyId?: number | null;
    };
    CompanyCustomerAddressAddEditModel: {
      street1?: string | null;
      street2?: string | null;
      zipCode?: string | null;
      city?: string | null;
      email?: string | null;
      comments?: string | null;
      country?: string | null;
      addressType?: components["schemas"]["AddressType"];
    };
    CompanyCustomerAddressModel: {
      /** Format: int32 */
      companyCustomerId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      id?: number | null;
      street1?: string | null;
      street2?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      email?: string | null;
      /**
       * @description Undefined = 0,
       * StreetAddress = 1 (VisitingAddress)
       * InvoiceAddress = 2,
       * LocationAddress = 3 (Used to connect an Employee to an office registered in Cinode)
       */
      addressType?: components["schemas"]["AddressType"];
      comments?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerAttachmentModel: {
      /** Format: int32 */
      customerId?: number;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number | null;
      /** Format: uuid */
      id?: string | null;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      identification?: string | null;
      seoId?: string | null;
      /** @deprecated */
      status?: components["schemas"]["Status"];
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerContactAddEditModel: {
      firstName: string;
      lastName: string;
      email?: string | null;
      phone1?: string | null;
      phone2?: string | null;
      title?: string | null;
      comments?: string | null;
    };
    CompanyCustomerContactBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      slug?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerContactModel: {
      title?: string | null;
      phone1?: string | null;
      phone2?: string | null;
      comments?: string | null;
      /** Format: date-time */
      createdDateTime?: string;
      tags?: components["schemas"]["CompanyTagModel"][] | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      slug?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * CreatedDateTime = 0
     *
     * FirstName = 1
     *
     * LastName = 2
     *
     * Email = 3
     *
     * UpdatedDateTime = 4
     *
     * CustomerId = 5
     * @enum {integer}
     */
    CompanyCustomerContactQuerySort: 0 | 1 | 2 | 3 | 4 | 5;
    CompanyCustomerContactQuerySortPageAndSortByModel: {
      sortBy?: components["schemas"]["CompanyCustomerContactQuerySort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    CompanyCustomerDeleteModel: {
      customerVerificationName?: string | null;
    };
    CompanyCustomerEditModel: {
      /** @deprecated */
      status?: boolean;
      name: string;
      description?: string | null;
      corporateIdentityNumber?: string | null;
      vatNumber?: string | null;
      identification?: string | null;
      email?: string | null;
      homepage?: string | null;
      phone?: string | null;
      fax?: string | null;
      intermediator?: boolean;
      size?: components["schemas"]["CompanySize"] | null;
    };
    CompanyCustomerExtendedModel: {
      email?: string | null;
      tags?: components["schemas"]["CompanyTagBaseModel"][] | null;
      managers?: components["schemas"]["CompanyCustomerManagerModel"][] | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      identification?: string | null;
      seoId?: string | null;
      /** @deprecated */
      status?: components["schemas"]["Status"];
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerManagerModel: {
      /** Format: int32 */
      companyCustomerManagerId?: number | null;
      /** Format: int32 */
      customerId?: number | null;
      customer?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyCustomerManagersAddEditModel: {
      companyUserIds?: number[] | null;
    };
    CompanyCustomerModel: {
      phone?: string | null;
      fax?: string | null;
      homepage?: string | null;
      corporateIdentityNumber?: string | null;
      vatNumber?: string | null;
      contacts?: components["schemas"]["CompanyCustomerContactBaseModel"][] | null;
      addresses?: components["schemas"]["CompanyCustomerAddressModel"][] | null;
      projects?: components["schemas"]["ProjectBaseModel"][] | null;
      intermediator?: boolean | null;
      attachments?: components["schemas"]["CompanyCustomerAttachmentModel"][] | null;
      size?: components["schemas"]["CompanySize"] | null;
      /** Format: int32 */
      countryId?: number | null;
      country?: components["schemas"]["CountryModel"] | null;
      /** Format: int64 */
      turnOver?: number | null;
      /** Format: int32 */
      turnOverCurrencyId?: number | null;
      turnOverCurrency?: components["schemas"]["CurrencyModel"] | null;
      email?: string | null;
      tags?: components["schemas"]["CompanyTagBaseModel"][] | null;
      managers?: components["schemas"]["CompanyCustomerManagerModel"][] | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      identification?: string | null;
      seoId?: string | null;
      /** @deprecated */
      status?: components["schemas"]["Status"];
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * CreatedDateTime = 0
     *
     * Name = 1
     *
     * Description = 2
     *
     * Identification = 3
     *
     * SeoId = 4
     *
     * Status = 5
     *
     * Phone = 6
     *
     * Email = 7
     *
     * Fax = 8
     *
     * Homepage = 9
     *
     * CorporateIdentityNumber = 10
     *
     * VATNumber = 11
     *
     * Intermediator = 12
     *
     * UpdatedDateTime = 13
     *
     * LastTouchDateTime = 14
     * @enum {integer}
     */
    CompanyCustomerQuerySort: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
    CompanyCustomerQuerySortPageAndSortByModel: {
      sortBy?: components["schemas"]["CompanyCustomerQuerySort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    CompanyEnabledModuleModel: {
      moduleId?: components["schemas"]["ModuleType"];
    };
    CompanyImageModel: {
      /** Format: int32 */
      id?: number;
      /** Format: uuid */
      imageFileName?: string;
      extension?: string | null;
      /** Format: int32 */
      companyId?: number;
      /** Format: date-time */
      created?: string;
      assignedToCompanyUser?: components["schemas"]["CompanyUserBaseModel"] | null;
      uploadedByCompanyUser?: components["schemas"]["CompanyUserBaseModel"] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyModel: {
      /** @description External identifier */
      corporateIdentityNumber?: string | null;
      vatNumber?: string | null;
      /** Format: int32 */
      registrationYear?: number | null;
      isTaxRegistered?: boolean | null;
      addresses?: components["schemas"]["CompanyAddressModel"][] | null;
      tags?: components["schemas"]["CompanyTagBaseModel"][] | null;
      /** Format: int32 */
      countryId?: number | null;
      defaultCurrency?: components["schemas"]["CurrencyModel"] | null;
      currencies?: components["schemas"]["CurrencyModel"][] | null;
      /** Format: int32 */
      id?: number | null;
      name?: string | null;
      seoId?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyProfileFilterModel: {
      /**
       * Format: int32
       * @description If set to true, the results will include only Profiles created within the last X days
       */
      createdOffsetDays?: number | null;
      /**
       * Format: int32
       * @description If set to true, the results will include only Profiles updated within the last X days
       */
      updatedOffsetDays?: number | null;
      pageAndSortBy?: components["schemas"]["CompanyProfileSortPageAndSortByModel"] | null;
    };
    /**
     * Format: int32
     * @description 0 - Id (Default),
     * 1 - CompanyUserId,
     * 2 - CreatedDateTime,
     * 3 - UpdatedDateTime
     * @enum {integer}
     */
    CompanyProfileSort: 0 | 1 | 2 | 3;
    CompanyProfileSortPageAndSortByModel: {
      /**
       * @description 0 - Id (Default),
       * 1 - CompanyUserId,
       * 2 - CreatedDateTime,
       * 3 - UpdatedDateTime
       */
      sortBy?: components["schemas"]["CompanyProfileSort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    CompanyProfilesModel: {
      /** Format: int32 */
      totalItems?: number;
      profiles?: components["schemas"]["CompanyUserProfileBaseModel"][] | null;
    };
    CompanyRecruitmentManagerModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyResumeTemplateBaseModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
    };
    CompanyResumeTemplateLanguageModel: {
      /** Format: int32 */
      languageId?: number;
      name?: string | null;
      culture?: string | null;
      lang?: string | null;
      country?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Egenföretagare = 0
     *
     * 2-10 = 1
     *
     * 11-50 = 2
     *
     * 51-200 = 3
     *
     * 201-500 = 4
     *
     * 501-1 000 = 5
     *
     * 1 001-5 000 = 6
     *
     * 5 001-10 000 = 7
     *
     * 10 001+ = 8
     * @enum {integer}
     */
    CompanySize: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    CompanySubcontractorGroupBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanySubcontractorGroupModel: {
      companyUserManager?: components["schemas"]["CompanyUserBaseModel"] | null;
      members?: components["schemas"]["CompanyUserBaseModel"][] | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyTagBaseModel: {
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      id?: number | null;
      seoId?: string | null;
      name?: string | null;
    };
    CompanyTagModel: {
      tagType?: components["schemas"]["CompanyTagTypeModel"] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      id?: number | null;
      seoId?: string | null;
      name?: string | null;
    };
    CompanyTagTypeModel: {
      /** Format: int32 */
      id?: number | null;
      name?: string | null;
    };
    CompanyUserAddModel: {
      email: string;
      firstName: string;
      lastName: string;
      password: string;
      confirmPassword: string;
      gender: components["schemas"]["UserGender"];
      status?: components["schemas"]["CompanyUserStatus"];
      /** Format: int32 */
      teamId?: number | null;
      title?: string | null;
      /** Format: int32 */
      languageId?: number | null;
      employmentNumber?: string | null;
      /** Format: date-time */
      employmentStartDate?: string | null;
      addProfile?: boolean;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: int32 */
      defaultCurrencyId?: number | null;
      /** Format: int32 */
      displayCurrencyId?: number | null;
      mustChangePassword?: boolean;
    };
    CompanyUserBaseModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserEditModel: {
      status?: components["schemas"]["CompanyUserStatus"];
      /** Format: date-time */
      employmentStartDate?: string | null;
      /** Format: date-time */
      employmentEndDate?: string | null;
      employmentNumber?: string | null;
      /** Format: int32 */
      invoicingGoal?: number | null;
      /** Format: int32 */
      mobility?: number | null;
      /** Format: int32 */
      availabilityPercent?: number | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      title?: string | null;
      email?: string | null;
      taxTable?: string | null;
      /** Format: int32 */
      baseSalary?: number | null;
      /** Format: int32 */
      provision?: number | null;
      /** Format: int32 */
      hourlyTargetRate?: number | null;
      /** Format: int32 */
      selfCost?: number | null;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: int32 */
      defaultCurrencyId?: number | null;
      /** Format: int32 */
      displayCurrencyId?: number | null;
      firstName?: string | null;
      lastName?: string | null;
      /** Format: date-time */
      dateOfBirth?: string | null;
      gender?: components["schemas"]["UserGender"];
      /** Format: int32 */
      companyCalendarId?: number | null;
      timezoneId?: string | null;
      phone?: string | null;
    };
    CompanyUserEventBaseModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserEventMeetingAddEditModel: {
      /** Format: int32 */
      companyUserId?: number;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      /**
       * @description The desired timezone to be used for StartDateTime and EndDateTime properties. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CompanyUserEventMeetingModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      location?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserEventModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserEventNoteAddEditModel: {
      /** Format: int32 */
      companyUserId?: number;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /**
       * @description The desired timezone to be used for NoteDate property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CompanyUserEventNoteModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserEventTaskAddEditModel: {
      /** Format: int32 */
      companyUserId?: number;
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /**
       * @description The desired timezone to be used for DueDateTime property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CompanyUserEventTaskModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /**
       * @description NotSpecified = 0
       * Phone = 1
       * Email = 2
       */
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserExtendedModel: {
      /**
       * @description Disconnected = 0,
       * PreActive = 2,
       * Active = 3,
       */
      status?: components["schemas"]["CompanyUserStatus"] | null;
      title?: string | null;
      companyUserEmail?: string | null;
      /** Format: date-time */
      createdDateTime?: string | null;
      /** Format: date-time */
      updatedDateTime?: string | null;
      companyAddress?: components["schemas"]["CompanyAddressModel"] | null;
      homeAddress?: components["schemas"]["LocationModel"] | null;
      image?: components["schemas"]["CompanyUserImageModel"] | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserFullModel: {
      /** Format: int32 */
      invoicingGoal?: number | null;
      taxTable?: string | null;
      /** Format: int32 */
      baseSalary?: number | null;
      /** Format: int32 */
      provision?: number | null;
      /** Format: int32 */
      hourlyTargetRate?: number | null;
      /** Format: int32 */
      selfCost?: number | null;
      /** Format: date-time */
      employmentStartDate?: string | null;
      /** Format: date-time */
      employmentEndDate?: string | null;
      employmentNumber?: string | null;
      /** Format: int32 */
      availabilityPercent?: number | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      /** Format: int32 */
      mobility?: number | null;
      locationName?: string | null;
      resumes?: components["schemas"]["CompanyUserResumeBaseModel"][] | null;
      roles?: components["schemas"]["RoleModel"][] | null;
      teamManagers?: components["schemas"]["TeamManagerModel"][] | null;
      teamMembers?: components["schemas"]["TeamMemberModel"][] | null;
      customerManagers?: components["schemas"]["CompanyCustomerManagerModel"][] | null;
      periods?: components["schemas"]["AbsencePeriodModel"][] | null;
      defaultCurrency?: components["schemas"]["CurrencyModel"] | null;
      phone?: string | null;
      /** Format: date-time */
      dateOfBirth?: string | null;
      tags?: components["schemas"]["CompanyTagModel"][] | null;
      /**
       * @description Disconnected = 0,
       * PreActive = 2,
       * Active = 3,
       */
      status?: components["schemas"]["CompanyUserStatus"] | null;
      title?: string | null;
      companyUserEmail?: string | null;
      /** Format: date-time */
      createdDateTime?: string | null;
      /** Format: date-time */
      updatedDateTime?: string | null;
      companyAddress?: components["schemas"]["CompanyAddressModel"] | null;
      homeAddress?: components["schemas"]["LocationModel"] | null;
      image?: components["schemas"]["CompanyUserImageModel"] | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserImageModel: {
      /** Format: int32 */
      imageId?: number;
      /** Format: int32 */
      companyId?: number;
      url?: string | null;
      largeImageUrl?: string | null;
      /** Format: date-time */
      uploadedWhen?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserInfoBlockViewModel: {
      address?: components["schemas"]["AddressInfoBlockViewModel"] | null;
      email?: string | null;
      title?: string | null;
    };
    CompanyUserModel: {
      /** Format: date-time */
      employmentStartDate?: string | null;
      /** Format: date-time */
      employmentEndDate?: string | null;
      employmentNumber?: string | null;
      /** Format: int32 */
      availabilityPercent?: number | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      /** Format: int32 */
      mobility?: number | null;
      locationName?: string | null;
      resumes?: components["schemas"]["CompanyUserResumeBaseModel"][] | null;
      roles?: components["schemas"]["RoleModel"][] | null;
      teamManagers?: components["schemas"]["TeamManagerModel"][] | null;
      teamMembers?: components["schemas"]["TeamMemberModel"][] | null;
      customerManagers?: components["schemas"]["CompanyCustomerManagerModel"][] | null;
      periods?: components["schemas"]["AbsencePeriodModel"][] | null;
      defaultCurrency?: components["schemas"]["CurrencyModel"] | null;
      phone?: string | null;
      /** Format: date-time */
      dateOfBirth?: string | null;
      tags?: components["schemas"]["CompanyTagModel"][] | null;
      /**
       * @description Disconnected = 0,
       * PreActive = 2,
       * Active = 3,
       */
      status?: components["schemas"]["CompanyUserStatus"] | null;
      title?: string | null;
      companyUserEmail?: string | null;
      /** Format: date-time */
      createdDateTime?: string | null;
      /** Format: date-time */
      updatedDateTime?: string | null;
      companyAddress?: components["schemas"]["CompanyAddressModel"] | null;
      homeAddress?: components["schemas"]["LocationModel"] | null;
      image?: components["schemas"]["CompanyUserImageModel"] | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserPermissionsEditModel: {
      permissions?: components["schemas"]["AccessLevel"][] | null;
    };
    CompanyUserProfileAddEditModel: {
      /** Format: int32 */
      languageId?: number | null;
    };
    CompanyUserProfileBaseModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: date-time */
      createdWhen?: string | null;
      /** Format: date-time */
      updatedWhen?: string | null;
      /** Format: date-time */
      publishedWhen?: string | null;
      presentation?: components["schemas"]["CompanyUserProfilePresentationModel"] | null;
      /** Format: int32 */
      profileTranslationId?: number;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
      translations?: components["schemas"]["CompanyUserProfileTranslationModel"][] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileCommitmentAddEditModel: {
      title: string;
      description?: string | null;
      isCurrent?: boolean | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      url?: string | null;
    };
    CompanyUserProfileCommitmentModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      translations?: components["schemas"]["CompanyUserProfileCommitmentTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileCommitmentTranslationModel: {
      /** Format: int32 */
      profileCommitmentId?: number | null;
      title?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileEducationAddEditModel: {
      schoolName: string;
      programName: string;
      degree?: string | null;
      description?: string | null;
      location?: components["schemas"]["LocationModel"] | null;
      isCurrent?: boolean | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      url?: string | null;
    };
    CompanyUserProfileEducationModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      locationId?: number | null;
      translations?: components["schemas"]["CompanyUserProfileEducationTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileEducationTranslationModel: {
      /** Format: int32 */
      profileEducationId?: number | null;
      schoolName?: string | null;
      programName?: string | null;
      degree?: string | null;
      description?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileEmployerAddEditModel: {
      name: string;
      title?: string | null;
      description?: string | null;
      isCurrent?: boolean | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      url?: string | null;
    };
    CompanyUserProfileEmployerModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      isCurrent?: boolean;
      translations?: components["schemas"]["CompanyUserProfileEmployerTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileEmployerTranslationModel: {
      /** Format: int32 */
      profileEmployerId?: number | null;
      name?: string | null;
      title?: string | null;
      description?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileExtSkillAddEditModel: {
      title: string;
    };
    CompanyUserProfileExtSkillModel: {
      /** Format: int32 */
      profileId?: number | null;
      translations?: components["schemas"]["CompanyUserProfileExtSkillTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileExtSkillTranslationModel: {
      /** Format: int32 */
      profileExtSkillId?: number | null;
      title?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileFullModel: {
      employers?: components["schemas"]["CompanyUserProfileEmployerModel"][] | null;
      workExperience?: components["schemas"]["CompanyUserProfileWorkExperienceModel"][] | null;
      education?: components["schemas"]["CompanyUserProfileEducationModel"][] | null;
      training?: components["schemas"]["CompanyUserProfileTrainingModel"][] | null;
      references?: components["schemas"]["CompanyUserProfileReferenceModel"][] | null;
      skills?: components["schemas"]["CompanyUserProfileSkillModel"][] | null;
      extSkills?: components["schemas"]["CompanyUserProfileExtSkillModel"][] | null;
      commitments?: components["schemas"]["CompanyUserProfileCommitmentModel"][] | null;
      languages?: components["schemas"]["CompanyUserProfileLanguageModel"][] | null;
      /** Format: uuid */
      userId?: string | null;
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: date-time */
      createdWhen?: string | null;
      /** Format: date-time */
      updatedWhen?: string | null;
      /** Format: date-time */
      publishedWhen?: string | null;
      presentation?: components["schemas"]["CompanyUserProfilePresentationModel"] | null;
      /** Format: int32 */
      profileTranslationId?: number;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
      translations?: components["schemas"]["CompanyUserProfileTranslationModel"][] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileLanguageAddEditModel: {
      /** Format: int32 */
      languageId: number;
      level?: components["schemas"]["LanguageLevel"];
    };
    CompanyUserProfileLanguageBranchModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      languageId?: number | null;
      language?: components["schemas"]["ProfileLanguageModel"] | null;
      enabled?: boolean;
    };
    CompanyUserProfileLanguageModel: {
      /** Format: int32 */
      profileId?: number | null;
      language?: components["schemas"]["ProfileLanguageModel"] | null;
      /** Format: int32 */
      level?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfilePresentationEditModel: {
      title?: string | null;
      description?: string | null;
      personalDescription?: string | null;
    };
    CompanyUserProfilePresentationModel: {
      translations?: components["schemas"]["CompanyUserProfilePresentationTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfilePresentationTranslationModel: {
      title?: string | null;
      description?: string | null;
      personalDescription?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileReferenceAddEditModel: {
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      telephone?: string | null;
      company?: string | null;
      position?: string | null;
      text?: string | null;
      /** Format: int32 */
      profileWorkExperienceId?: number | null;
    };
    CompanyUserProfileReferenceModel: {
      /** Format: int32 */
      profileId?: number | null;
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      telephone?: string | null;
      /** Format: int32 */
      profileWorkExperienceId?: number | null;
      translations?: components["schemas"]["CompanyUserProfileReferenceTranslationModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileReferenceTranslationModel: {
      /** Format: int32 */
      profileReferenceId?: number | null;
      company?: string | null;
      position?: string | null;
      text?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileSkillAddModel: {
      /** Format: int32 */
      keywordSynonymId?: number | null;
      name?: string | null;
      /** Format: int32 */
      level?: number | null;
    };
    CompanyUserProfileSkillEditModel: {
      /** Format: int32 */
      keywordSynonymId?: number | null;
      /** Format: int32 */
      level?: number;
    };
    CompanyUserProfileSkillHistoryModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: date-time */
      changeDateTime?: string | null;
      /** Format: int32 */
      level?: number | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      keywordId?: number | null;
      favourite?: boolean;
    };
    CompanyUserProfileSkillModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      level?: number | null;
      /** Format: int32 */
      levelGoal?: number | null;
      /** Format: date-time */
      levelGoalDeadline?: string | null;
      keyword?: components["schemas"]["KeywordModel"] | null;
      changeHistory?: components["schemas"]["CompanyUserProfileSkillHistoryModel"][] | null;
      translations?: components["schemas"]["CompanyUserProfileSkillTranslationModel"][] | null;
      favourite?: boolean;
      /** Format: int32 */
      numberOfDaysWorkExperience?: number;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      id?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileSkillTranslationModel: {
      /** Format: int32 */
      keywordId?: number | null;
      /** Format: int32 */
      keywordSynonymId?: number | null;
      keywordSynonym?: components["schemas"]["KeywordSynonymModel"] | null;
      keyword?: components["schemas"]["KeywordModel"] | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileTrainingAddEditModel: {
      title?: string | null;
      /** Format: int32 */
      year?: number;
      issuer?: string | null;
      supplier?: string | null;
      code?: string | null;
      description?: string | null;
      trainingType?: components["schemas"]["TrainingType"];
      url?: string | null;
      /** Format: date-time */
      expireDate?: string | null;
    };
    CompanyUserProfileTrainingModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      id?: number | null;
      trainingType?: components["schemas"]["TrainingType"] | null;
      /** Format: int32 */
      year?: number | null;
      code?: string | null;
      translations?: components["schemas"]["CompanyUserProfileTrainingTranslationModel"][] | null;
      /** Format: date-time */
      expireDate?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileTrainingTranslationModel: {
      /** Format: int32 */
      profileTrainingId?: number;
      title?: string | null;
      description?: string | null;
      issuer?: string | null;
      supplier?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProfileTranslationModel: {
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      languageBranchId?: number | null;
      languageBranch?: components["schemas"]["CompanyUserProfileLanguageBranchModel"] | null;
    };
    CompanyUserProfileWorkExperienceAddEditModel: {
      title: string;
      description: string;
      employer: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate?: string | null;
      isCurrent?: boolean | null;
      location?: components["schemas"]["LocationModel"] | null;
      url?: string | null;
      skills?: components["schemas"]["CompanyUserProfileWorkExperienceSkillAddModel"][] | null;
    };
    CompanyUserProfileWorkExperienceModel: {
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      id?: number | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      isCurrent?: boolean | null;
      translations?: components["schemas"]["CompanyUserProfileWorkExperienceTranslationModel"][] | null;
      /** Format: int32 */
      locationId?: number | null;
      skills?: components["schemas"]["CompanyUserProfileSkillModel"][] | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      url?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserProfileWorkExperienceSkillAddModel: {
      /** Format: int32 */
      keywordSynonymId: number;
      name: string;
    };
    CompanyUserProfileWorkExperienceTranslationModel: {
      /** Format: int32 */
      profileWorkExperienceId?: number | null;
      employer?: string | null;
      title?: string | null;
      description?: string | null;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      profileTranslation?: components["schemas"]["CompanyUserProfileTranslationModel"] | null;
    };
    CompanyUserProjectAssignmentModel: {
      assigned?: components["schemas"]["ProjectAssignmentBaseModel"][] | null;
      prospect?: components["schemas"]["ProjectAssignmentBaseModel"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * CreatedDateTime = 0
     *
     * FirstName = 1
     *
     * LastName = 2
     *
     * Email = 3
     *
     * UpdatedDateTime = 4
     * @enum {integer}
     */
    CompanyUserQuerySort: 0 | 1 | 2 | 3 | 4;
    CompanyUserQuerySortPageAndSortByModel: {
      sortBy?: components["schemas"]["CompanyUserQuerySort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    CompanyUserResumeBaseModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      created?: components["schemas"]["CreatedModel"] | null;
      updated?: components["schemas"]["UpdatedModel"] | null;
      title?: string | null;
      description?: string | null;
      slug?: string | null;
      language?: components["schemas"]["CompanyResumeTemplateLanguageModel"] | null;
      template?: components["schemas"]["CompanyResumeTemplateBaseModel"] | null;
      isPublic?: boolean;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserSearchSkillModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyUserId?: number | null;
      /** @deprecated */
      firstname?: string | null;
      firstName?: string | null;
      /** @deprecated */
      lastname?: string | null;
      lastName?: string | null;
      title?: string | null;
      seoId?: string | null;
      /** Format: int32 */
      addressId?: number | null;
      addressDisplayName?: string | null;
      teams?: components["schemas"]["TeamBaseModel"][] | null;
      skills?: components["schemas"]["SkillResultModel"][] | null;
      status?: components["schemas"]["CompanyUserStatus"] | null;
      /** Format: int32 */
      companyCandidateId?: number | null;
      groups?: components["schemas"]["CompanySubcontractorGroupBaseModel"][] | null;
      companyUserType?: components["schemas"]["CompanyUserType"];
    };
    CompanyUserSkillModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyUserId?: number;
      /** Format: int32 */
      numberOfDaysWorkExperience?: number;
      /** Format: int32 */
      profileId?: number | null;
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      level?: number | null;
      /** Format: int32 */
      levelGoal?: number | null;
      /** Format: date-time */
      levelGoalDeadline?: string | null;
      keyword?: components["schemas"]["KeywordModel"] | null;
      favourite?: boolean;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Frånkopplad = 0
     *
     * Kommande = 2
     *
     * Aktiv = 3
     * @enum {integer}
     */
    CompanyUserStatus: 0 | 2 | 3;
    CompanyUserSubcontractorAddEditModel: {
      firstName: string;
      lastName: string;
      email: string;
      title?: string | null;
      password: string;
      passwordConfirm: string;
      gender: components["schemas"]["UserGender"];
      /** Format: int32 */
      profileLanguageId?: number | null;
      createProfile?: boolean;
      /** Format: int32 */
      tariff?: number | null;
      phone?: string | null;
      /** Format: int32 */
      currencyId?: number | null;
      /** Format: int32 */
      languageId: number;
      /** Format: int32 */
      companyCalendarId?: number | null;
      /** Format: int32 */
      companyAddressId?: number | null;
      companyName?: string | null;
      companyIdentifier?: string | null;
      internalIdentifier?: string | null;
      linkedIn?: string | null;
      /** Format: int32 */
      rating?: number | null;
    };
    CompanyUserSubcontractorAttachmentModel: {
      /** Format: int32 */
      companyUserId?: number;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number | null;
      /** Format: uuid */
      id?: string | null;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserSubcontractorBaseModel: {
      /**
       * @description Disconnected = 0
       * Active = 1
       */
      status?: components["schemas"]["CompanyUserSubcontractorStatus"] | null;
      /** Format: int32 */
      rating?: number | null;
      email?: string | null;
      companyName?: string | null;
      companyIdentifier?: string | null;
      companyAddress?: components["schemas"]["CompanyAddressModel"] | null;
      homeAddress?: components["schemas"]["LocationModel"] | null;
      image?: components["schemas"]["CompanyUserImageModel"] | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserSubcontractorFileAttachmentListModel: {
      /** Format: int32 */
      companyUserId?: number;
      /** Format: int32 */
      companyId?: number;
      attachments?: components["schemas"]["CompanyUserSubcontractorFileAttachmentModel"][] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserSubcontractorFileAttachmentModel: {
      fileName?: string | null;
      extension?: string | null;
      /** Format: int32 */
      companyUserId?: number;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number | null;
      /** Format: uuid */
      id?: string | null;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    CompanyUserSubcontractorModel: {
      resumes?: components["schemas"]["CompanyUserResumeBaseModel"][] | null;
      defaultCurrency?: components["schemas"]["CurrencyModel"] | null;
      /** Format: int32 */
      tariff?: number | null;
      /** Format: date-time */
      createdDateTime?: string;
      groups?: components["schemas"]["CompanySubcontractorGroupBaseModel"][] | null;
      phone?: string | null;
      tags?: components["schemas"]["CompanyTagBaseModel"][] | null;
      attachments?: components["schemas"]["CompanyUserSubcontractorAttachmentModel"][] | null;
      /**
       * @description Disconnected = 0
       * Active = 1
       */
      status?: components["schemas"]["CompanyUserSubcontractorStatus"] | null;
      /** Format: int32 */
      rating?: number | null;
      email?: string | null;
      companyName?: string | null;
      companyIdentifier?: string | null;
      companyAddress?: components["schemas"]["CompanyAddressModel"] | null;
      homeAddress?: components["schemas"]["LocationModel"] | null;
      image?: components["schemas"]["CompanyUserImageModel"] | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      /**
       * @description Employee = 0,
       * Candidate = 10,
       * Subcontractor = 20
       */
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /**
       * Format: int32
       * @deprecated
       */
      id?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Frånkopplad = 0
     *
     * Aktiv = 1
     * @enum {integer}
     */
    CompanyUserSubcontractorStatus: 0 | 1;
    /**
     * Format: int32
     * @description
     *
     * Medarbetare = 0
     *
     * Kandidat = 10
     *
     * Underkonsult = 20
     *
     * Api = 30
     *
     * Bot = 40
     * @enum {integer}
     */
    CompanyUserType: 0 | 10 | 20 | 30 | 40;
    /**
     * Format: int32
     * @description
     *
     * Timpris = 0
     *
     * Fastpris = 1
     * @enum {integer}
     */
    ContractType: 0 | 1;
    ConvertCompanyUserToAadAccountModel: {
      /** Format: uuid */
      objectIdentifier: string;
    };
    CountryModel: {
      /** Format: int32 */
      countryId?: number;
      code?: string | null;
      name?: string | null;
    };
    CreatedModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      firstName?: string | null;
      lastName?: string | null;
      /** Format: date-time */
      time?: string | null;
    };
    CurrencyModel: {
      /** Format: int32 */
      id?: number;
      currencyCode?: string | null;
      description?: string | null;
    };
    CustomerEventBaseModel: {
      /** Format: int32 */
      customerId?: number | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CustomerEventMeetingAddEditModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      /**
       * @description The desired timezone to be used for StartDateTime and EndDateTime properties. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CustomerEventMeetingModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      /** Format: int32 */
      customerId?: number | null;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      location?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CustomerEventModel: {
      /** Format: int32 */
      customerId?: number | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CustomerEventNoteAddEditModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /**
       * @description The desired timezone to be used for NoteDate property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CustomerEventNoteModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      /** Format: int32 */
      customerId?: number | null;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    CustomerEventTaskAddEditModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /**
       * @description The desired timezone to be used for DueDateTime property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    CustomerEventTaskModel: {
      /** Format: int32 */
      customerContactId?: number | null;
      /** Format: int32 */
      customerId?: number | null;
      /**
       * @description NotSpecified = 0
       * Phone = 1
       * Email = 2
       */
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    DynamicCompanyUserResumeModel: {
      /** Format: int32 */
      imageId?: number | null;
      /** Format: int32 */
      parentProfileId?: number;
      /** Format: int32 */
      profileTranslationId?: number;
      /** Format: int32 */
      parentCompanyUserResumeId?: number | null;
      resume?: components["schemas"]["DynamicTemplateViewModel"] | null;
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      created?: components["schemas"]["CreatedModel"] | null;
      updated?: components["schemas"]["UpdatedModel"] | null;
      title?: string | null;
      description?: string | null;
      slug?: string | null;
      language?: components["schemas"]["CompanyResumeTemplateLanguageModel"] | null;
      template?: components["schemas"]["CompanyResumeTemplateBaseModel"] | null;
      isPublic?: boolean;
      links?: components["schemas"]["Link"][] | null;
    };
    DynamicTemplateViewModel: {
      blocks?: components["schemas"]["IDynamicBlockViewModel"][] | null;
      logotype?: components["schemas"]["ITemplateLogotype"] | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      resumeTemplateId?: number;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      companyUserId?: number;
      slug?: string | null;
      title: string;
      description?: string | null;
      /** Format: int32 */
      logotypeId?: number | null;
      wordEnabled?: boolean;
      profileImageSize?: components["schemas"]["ImageSize"];
      allowNoProfileImage?: boolean;
      hideProfileImageInEdit?: boolean;
      companyLogotypeImageSize?: components["schemas"]["ImageSize"];
      pdfEngineType?: components["schemas"]["PdfEngineType"];
      wordEngineType?: components["schemas"]["WordEngineType"];
      pdfOrientation?: components["schemas"]["PdfOrientation"];
      /** Format: int32 */
      pdfMarginTop?: number;
      /** Format: int32 */
      pdfMarginRight?: number;
      /** Format: int32 */
      pdfMarginBottom?: number;
      /** Format: int32 */
      pdfMarginLeft?: number;
      customFooterForWkhtml?: boolean;
      pdfFooter?: boolean;
      showPreviewToggle?: boolean;
      /** Format: int32 */
      contactInfoId?: number | null;
      contactInfo?: components["schemas"]["IContactInfoViewModel"] | null;
      userInfo?: components["schemas"]["ITemplateUserInfo"] | null;
      companyUserInfo?: components["schemas"]["CompanyUserInfoBlockViewModel"] | null;
      profileImage?: components["schemas"]["ITemplateImage"] | null;
      company?: components["schemas"]["ITemplateCompany"] | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      /** Format: int32 */
      languageBranchId?: number | null;
      isPublic?: boolean;
      locked?: boolean;
      currentLanguage?: string | null;
      styleAssets?: components["schemas"]["ITemplateStyleAssetViewModel"][] | null;
      customerManagedStyleAsset?: components["schemas"]["ITemplateStyleAssetViewModel"] | null;
      sharedStyleAssets?: components["schemas"]["ITemplateSharedAssetViewModel"][] | null;
      sharedScriptAssets?: components["schemas"]["ITemplateSharedAssetViewModel"][] | null;
      sharedFontAssets?: components["schemas"]["ITemplateSharedAssetViewModel"][] | null;
    };
    EducationBlockItemModel: {
      url?: string | null;
      schoolName?: string | null;
      programName?: string | null;
      degree?: string | null;
      description?: string | null;
      location?: components["schemas"]["LocationBlockModel"] | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    EducationBlockModel: {
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      data?: components["schemas"]["EducationBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    EmployerBlockItemModel: {
      title?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    EmployerBlockModel: {
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      data?: components["schemas"]["EmployerBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ErrorModel: {
      /** @description CorrelationId */
      correlationId?: string | null;
      /** @description Severity of error */
      status?: string | null;
      /** @description Error description in plain text */
      description?: string | null;
      /**
       * Format: int32
       * @description Cinode specific error code
       */
      code?: number | null;
      /** @description Url to help page containing more information */
      moreInfo?: string | null;
    };
    EventCommentModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: uuid */
      eventId?: string | null;
      text?: string | null;
      /** Format: int32 */
      companyUserId?: number;
      companyUserName?: string | null;
      /** Format: date-time */
      created?: string;
    };
    EventMeetingAddEditModel: {
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      /**
       * @description The desired timezone to be used for StartDateTime and EndDateTime properties. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    EventNoteAddEditModel: {
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /**
       * @description The desired timezone to be used for NoteDate property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    /**
     * Format: int32
     * @description
     *
     * Ej angiven = 0
     *
     * Telefonsamtal = 1
     *
     * E-mail = 2
     * @enum {integer}
     */
    EventNoteType: 0 | 1 | 2;
    /**
     * Format: int32
     * @description
     *
     * Inte påbörjad = 0
     *
     * Påbörjad = 1
     *
     * Färdig = 2
     *
     * Uppskjuten = 3
     *
     * Väntar = 4
     * @enum {integer}
     */
    EventStatusValue: 0 | 1 | 2 | 3 | 4;
    EventTaskAddEditModel: {
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /**
       * @description The desired timezone to be used for DueDateTime property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    /**
     * Format: int32
     * @description
     *
     * Ej angiven = 0
     *
     * Telefonsamtal = 1
     *
     * E-mail = 2
     * @enum {integer}
     */
    EventTaskType: 0 | 1 | 2;
    /**
     * Format: int32
     * @description
     *
     * Möte = 0
     *
     * Notering = 1
     *
     * Uppgift = 2
     *
     * Samtal = 3
     * @enum {integer}
     */
    EventType: 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @description
     *
     * Publik = 0
     *
     * Privat = 1
     * @enum {integer}
     */
    EventVisibility: 0 | 1;
    /**
     * Format: int32
     * @description
     *
     * Procent = 0
     *
     * Timmar = 1
     * @enum {integer}
     */
    ExtentType: 0 | 1;
    ExtraSkillBlockModel: {
      data?: components["schemas"]["ExtraSkillItemBlockModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ExtraSkillItemBlockModel: {
      title?: string | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    FilterModel: {
      name?: string | null;
      values?: number[] | null;
    };
    HighlightedWorkExperienceBlockItemModel: {
      title?: string | null;
      description?: string | null;
      employer?: string | null;
      location?: components["schemas"]["LocationBlockModel"] | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string | null;
      url?: string | null;
      logotype?: components["schemas"]["ImageBlockModel"] | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    HighlightedWorkExperienceBlockModel: {
      /** Format: int32 */
      numberOfItemsInList?: number;
      /** Format: int32 */
      titleLength?: number;
      /** Format: int32 */
      descriptionLength?: number;
      /** Format: int32 */
      employerLength?: number;
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      data?: components["schemas"]["HighlightedWorkExperienceBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ICompanyAddressViewModel: {
      /** Format: int32 */
      addressId?: number;
      street1?: string | null;
      street2?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      addressType?: components["schemas"]["AddressType"];
    };
    ICompanyCandidatePatchDocument: {
      /** Format: int32 */
      pipelineId?: number | null;
      /** Format: int32 */
      pipelineStageId?: number | null;
      /** Format: int32 */
      recruitmentManagerId?: number | null;
      state?: components["schemas"]["CompanyCandidateState"] | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      campaignCode?: string | null;
    };
    ICompanyUserEmployeePatchDocument: {
      status?: components["schemas"]["CompanyUserStatus"];
      /** Format: date-time */
      employmentStartDate?: string | null;
      /** Format: date-time */
      employmentEndDate?: string | null;
      employmentNumber?: string | null;
      /** Format: int32 */
      invoicingGoal?: number | null;
      /** Format: int32 */
      mobility?: number | null;
      /** Format: int32 */
      availabilityPercent?: number | null;
      /** Format: date-time */
      availableFromDate?: string | null;
      title?: string | null;
      email?: string | null;
      taxTable?: string | null;
      /** Format: int32 */
      baseSalary?: number | null;
      /** Format: int32 */
      provision?: number | null;
      /** Format: int32 */
      hourlyTargetRate?: number | null;
      /** Format: int32 */
      selfCost?: number | null;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: int32 */
      defaultCurrencyId?: number | null;
      /** Format: int32 */
      displayCurrencyId?: number | null;
      firstname?: string | null;
      lastname?: string | null;
      /** Format: date-time */
      dateOfBirth?: string | null;
      gender?: components["schemas"]["UserGender"];
      /** Format: int32 */
      companyCalendarId?: number | null;
      timezoneId?: string | null;
      phone?: string | null;
      desiredAssignment?: string | null;
      internalIdentifier?: string | null;
      twitter?: string | null;
      linkedIn?: string | null;
      homepage?: string | null;
      blog?: string | null;
      gitHub?: string | null;
    };
    IContactInfoViewModel: {
      /** Format: int32 */
      contactInfoId?: number;
      displayName?: string | null;
      url?: string | null;
      email?: string | null;
      phone?: string | null;
      address?: components["schemas"]["ICompanyAddressViewModel"] | null;
    };
    IDynamicBlockViewModel: {
      viewComponentName?: string | null;
      /** Format: int32 */
      companyUserResumeId?: number;
      /** Format: int32 */
      companyUserId?: number;
      isEditable?: boolean;
      partialEditViewPath?: string | null;
      friendlyBlockName?: string | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ITemplateCompany: {
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      seoId?: string | null;
      description?: string | null;
      corporateIdentityNumber?: string | null;
      /** Format: int32 */
      registrationYear?: number;
      isTaxRegistered?: boolean;
      isUsingFreemiumResumes?: boolean;
    };
    ITemplateImage: {
      /** Format: int32 */
      companyUserResumeId?: number;
      /** Format: int32 */
      companyUserId?: number;
      /** Format: int32 */
      imageId?: number;
      imageUrl?: string | null;
      imageOriginalUrl?: string | null;
      allowNoProfileImage?: boolean;
      showImage?: boolean;
      imageSize?: components["schemas"]["ImageSize"];
      useDefaultImage?: boolean;
      /** Format: uuid */
      imageFileName?: string;
      extension?: string | null;
    };
    ITemplateLogotype: {
      imageUrl?: string | null;
      imageOriginalUrl?: string | null;
      imageSize?: components["schemas"]["ImageSize"];
      /** Format: uuid */
      imageFileName?: string;
      extension?: string | null;
    };
    ITemplateSharedAssetViewModel: {
      /** Format: int32 */
      order?: number;
      fileName?: string | null;
      version?: string | null;
    };
    ITemplateStyleAssetViewModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      resumeTemplateId?: number;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      order?: number;
      fileName?: string | null;
      version?: string | null;
    };
    ITemplateUserInfo: {
      firstname?: string | null;
      lastname?: string | null;
      fullname?: string | null;
      phone?: string | null;
      /** Format: date-time */
      dateOfBirth?: string | null;
      email?: string | null;
      twitterUserName?: string | null;
      linkedInUserName?: string | null;
      homepageUrl?: string | null;
      bloggUrl?: string | null;
      gitHubUserName?: string | null;
      location?: string | null;
      country?: string | null;
      internalIdentifier?: string | null;
    };
    ImageBlockModel: {
      /** Format: int32 */
      imageId?: number | null;
      /** Format: int32 */
      companyImageId?: number | null;
      imageOriginalUrl?: string | null;
      /** Format: uuid */
      imageFileName?: string;
      extension?: string | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Original = 0
     *
     * H40W40 = 1
     *
     * H100W100 = 2
     *
     * H200W200 = 3
     *
     * H300W300 = 4
     *
     * W100 = 5
     *
     * H60 = 6
     *
     * H100 = 7
     *
     * H40 = 8
     *
     * W340 = 9
     *
     * W1800 = 10
     *
     * H750W1800 = 11
     *
     * H250 = 12
     *
     * H400W400 = 13
     *
     * W150 = 14
     *
     * W1200 = 15
     * @enum {integer}
     */
    ImageSize: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15;
    /** @description Array of patch operations to perform */
    JsonPatchDocument: components["schemas"]["Operation"][];
    KeywordModel: {
      /** Format: int32 */
      id?: number | null;
      /**
       * @description Uncategorized = 0,
       * Industries = 1
       * Roles = 2
       * Tools = 3
       * Techniques = 4
       * MethodsProcesses = 5
       * Platforms = 6
       * Products = 7
       * Certifications = 10
       * Materials = 11
       * SpecificationsRegulations = 12
       * Hardware = 13
       * OperationalAreaAndFunction = 14
       * Construction = 15
       * ReportsInvestigations = 16
       * SpecialitiesMedicine = 17
       * StandardsRegulations = 18
       * Accreditation = 19
       */
      type?: components["schemas"]["KeywordType"];
      /** Format: int32 */
      masterSynonymId?: number | null;
      masterSynonym?: string | null;
      synonyms?: string[] | null;
      universal?: boolean;
      verified?: boolean;
    };
    KeywordSynonymModel: {
      /** Format: int32 */
      keywordId?: number | null;
      /** Format: int32 */
      id?: number | null;
      keyword?: components["schemas"]["KeywordModel"] | null;
      name?: string | null;
      seoId?: string | null;
      description?: string | null;
      /** Format: int32 */
      languageId?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Okategoriserad = 0
     *
     * Branscher = 1
     *
     * Roller = 2
     *
     * Verktyg = 3
     *
     * Tekniker = 4
     *
     * Metoder och processer = 5
     *
     * Plattformar = 6
     *
     * Produkter och tjänster = 7
     *
     * Certifieringar = 10
     *
     * Material = 11
     *
     * Specifikationer och förordningar = 12
     *
     * Hårdvara = 13
     *
     * Verksamhet och funktion = 14
     *
     * Byggnationer = 15
     *
     * Rapporter och utredningar = 16
     *
     * Specialiteter - Medicin = 17
     *
     * Standarder och regelverk = 18
     *
     * Behörigheter = 19
     *
     * Mjuka färdigheter = 20
     *
     * CustomName = 100
     * @enum {integer}
     */
    KeywordType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 100;
    LanguageBlockModel: {
      data?: components["schemas"]["LanguageItemBlockModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    LanguageItemBlockModel: {
      culture?: string | null;
      lang?: string | null;
      country?: string | null;
      name?: string | null;
      /** Format: int32 */
      level?: number;
      /** Format: int32 */
      languageId?: number | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    /**
     * Format: int32
     * @description
     *
     * Enstaka ord och fraser = 0
     *
     * Grundläggande kunskaper = 1
     *
     * Goda kunskaper = 2
     *
     * Flytande = 3
     *
     * Modersmål = 4
     * @enum {integer}
     */
    LanguageLevel: 0 | 1 | 2 | 3 | 4;
    Link: {
      href?: string | null;
      rel?: string | null;
      methods?: string[] | null;
    };
    LocationBlockModel: {
      /** Format: int32 */
      locationId?: number;
      googleId?: string | null;
      name?: string | null;
      street?: string | null;
      streetNumber?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      countryCode?: string | null;
      formattedAddress?: string | null;
      phoneNumber?: string | null;
      latitude?: string | null;
      longitude?: string | null;
      webSiteUrl?: string | null;
      displayName?: string | null;
    };
    LocationModel: {
      /** Format: int32 */
      locationId?: number;
      name?: string | null;
      street?: string | null;
      streetNumber?: string | null;
      zipCode?: string | null;
      city?: string | null;
      country?: string | null;
      countryCode?: string | null;
      formattedAddress?: string | null;
      phoneNumber?: string | null;
      latitude?: string | null;
      longitude?: string | null;
      webSiteUrl?: string | null;
      displayName?: string | null;
    };
    MentionTextModel: {
      value?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * CompanyUserResume = 1
     *
     * Customers = 2
     *
     * Assignments = 3
     *
     * Partners = 4
     *
     * Offers = 5
     *
     * Reports = 6
     *
     * Recruitment = 8
     *
     * Absence = 9
     *
     * Api = 10
     *
     * ReferenceText = 11
     *
     * ProfileCompleteness = 12
     *
     * CalendarSync = 13
     *
     * AllowWidgetModification = 14
     *
     * ConfiguredFilters = 19
     *
     * SkillSets = 20
     *
     * ProfileUpdateReminders = 21
     *
     * OverdueProjectReminders = 22
     *
     * EmailSync = 23
     *
     * ApplicationRegistration = 30
     *
     * ApplicationDirectory = 31
     *
     * NextGenResume = 40
     *
     * HideLinkToMvcProfilePageInSidebarAndRemoveEditAndCopyCVInoldViewAndTheBetaChips = 41
     *
     * ImportCv = 42
     *
     * ExternalAccounts = 50
     *
     * ConvertAccount = 51
     *
     * UserProvisioning = 52
     *
     * Webhooks = 60
     *
     * GrowthPlan = 70
     *
     * Intercom = 600
     * @enum {integer}
     */
    ModuleType: 1 | 2 | 3 | 4 | 5 | 6 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 19 | 20 | 21 | 22 | 23 | 30 | 31 | 40 | 41 | 42 | 50 | 51 | 52 | 60 | 70 | 600;
    Operation: {
      op?: string;
      value?: Record<string, unknown> | null;
      path?: string;
    };
    PartnerBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
      description?: string | null;
      partnerConnection?: components["schemas"]["PartnerConnectionBaseModel"] | null;
      companyUserManager?: components["schemas"]["CompanyUserBaseModel"] | null;
      hasTrusts?: boolean;
      isEnabled?: boolean;
    };
    PartnerConnectionBaseModel: {
      /** Format: int32 */
      companyId?: number;
      company?: components["schemas"]["CompanyBaseModel"] | null;
      /** Format: int32 */
      partnerId?: number;
      /** Format: int32 */
      connectedPartnerConnectionId?: number | null;
      /** Format: int32 */
      partnerCompanyId?: number;
      partnerCompany?: components["schemas"]["CompanyBaseModel"] | null;
      grantedTrusts?: components["schemas"]["PartnerConnectionTrustType"][] | null;
      receivedTrusts?: components["schemas"]["PartnerConnectionTrustType"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Anonymiserat = 10
     *
     * Transparent = 20
     *
     * Avisera = 30
     *
     * Boka = 40
     *
     * Matcha = 50
     *
     * Tillgänglighet = 60
     * @enum {integer}
     */
    PartnerConnectionTrustType: 10 | 20 | 30 | 40 | 50 | 60;
    PartnerRecipientBaseModel: {
      /** Format: int32 */
      partnerId?: number;
      requestedCompanyUserAnonymousHash?: string | null;
      /** Format: int32 */
      requestedCompanyUserId?: number | null;
    };
    PartnersFilterModel: {
      query?: string | null;
      onlyIncludeConnectedPartners?: boolean;
    };
    PartnersOverviewModel: {
      partners?: components["schemas"]["PartnerBaseModel"][] | null;
      /** Format: int32 */
      totalItems?: number;
      filter?: components["schemas"]["PartnersFilterModel"] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * WkHtmlToPdf = 0
     *
     * Puppeteer = 2
     * @enum {integer}
     */
    PdfEngineType: 0 | 2;
    /**
     * Format: int32
     * @description
     *
     * Portrait = 0
     *
     * Landscape = 1
     * @enum {integer}
     */
    PdfOrientation: 0 | 1;
    PresentationBlockModel: {
      /** Format: date-time */
      discarded?: string | null;
      title?: string | null;
      description?: string | null;
      personalDescription?: string | null;
      /** @deprecated */
      personalDescriptionHeading?: string | null;
      subHeading?: string | null;
      useAdvancedFormatting?: boolean;
      editorSettings?: string | null;
      hideSubHeading?: boolean;
      /** Format: int32 */
      personalPresentationLength?: number;
      showPersonalPresentation?: boolean;
      /** Format: int32 */
      titleLength?: number;
      /** Format: int32 */
      descriptionLength?: number;
      /** Format: int32 */
      employerLength?: number;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ProfileLanguageModel: {
      /** Format: int32 */
      languageId?: number | null;
      name?: string | null;
      culture?: string | null;
      lang?: string | null;
      country?: string | null;
    };
    ProjectAddEditModel: {
      title: string;
      /** Format: int32 */
      customerId: number;
      description?: string | null;
      identifier?: string | null;
      customerIdentifier?: string | null;
      /** Format: int32 */
      intermediatorId?: number | null;
      /** Format: date-time */
      estimatedCloseDate?: string | null;
      /** Format: int32 */
      estimatedValue?: number | null;
      /** Format: int32 */
      probability?: number | null;
      /** Format: int32 */
      pipelineId?: number | null;
      /** Format: int32 */
      pipelineStageId?: number | null;
      /** Format: int32 */
      currencyId?: number | null;
      projectState?: components["schemas"]["ProjectState"];
      location?: components["schemas"]["LocationModel"] | null;
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      stateReasonId?: number | null;
      /** @default 5 */
      priority?: components["schemas"]["ProjectPriority"];
      /** @description List of sales managers employee ids */
      salesManagerIds?: number[] | null;
      /** @description List of project managers employee ids */
      projectManagerIds?: number[] | null;
    };
    ProjectAssignmentAddModel: {
      title: string;
      description?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      rate?: number | null;
      /** Format: int32 */
      extent?: number | null;
      /** Format: date-time */
      oralAgreementToDate?: string | null;
      /** Format: date-time */
      optionToDate?: string | null;
      contractType?: components["schemas"]["ContractType"];
      extentType?: components["schemas"]["ExtentType"];
      /** Format: int32 */
      currencyId?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Ej bokad = 0
     *
     * Preliminär = 1
     *
     * Tillsatt = 2
     * @enum {integer}
     */
    ProjectAssignmentAllocationStatus: 0 | 1 | 2;
    ProjectAssignmentAnnounceModel: {
      title: string;
      description?: string | null;
      /** Format: date-time */
      deadline: string;
      /** Format: double */
      price?: number | null;
      isPriceNegotiable?: boolean;
      /** Format: int32 */
      currencyId?: number | null;
      /** Format: int32 */
      managerCompanyUserId: number;
      attachmentIds?: string[] | null;
      partnerRecipients?: components["schemas"]["PartnerRecipientBaseModel"][] | null;
      subcontractorIds?: number[] | null;
      announceToPartnerNetwork?: boolean | null;
      announceToMarket?: boolean | null;
      isRemote?: boolean;
      isEndCustomerAssignment?: boolean | null;
      /** @description Set to true if you actually want to publish the announcement to your recipients, if you are developing/testing the endpoint it should be false, then no persist will take place. */
      publishForReal?: boolean;
    };
    ProjectAssignmentAnnouncementBaseModel: {
      /** Format: int32 */
      requestId?: number;
      title?: string | null;
      /** Format: int32 */
      projectId?: number;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      projectAssignmentId?: number;
      /** Format: date-time */
      createdDateTime?: string;
      /** Format: date-time */
      deadline?: string;
      /** Format: double */
      price?: number | null;
      contractType?: components["schemas"]["ContractType"];
      description?: string | null;
      descriptionHtml?: string | null;
      currencyCode?: string | null;
      /** Format: int32 */
      currencyId?: number | null;
      status?: components["schemas"]["ProjectAssignmentRequestStatus"];
      statusText?: string | null;
      isAnnouncedToPartnerNetwork?: boolean | null;
      isPriceNegotiable?: boolean;
      isRemote?: boolean | null;
      isAnnouncedToMarket?: boolean | null;
      isEndCustomerAssignment?: boolean | null;
    };
    ProjectAssignmentBaseModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number;
      project?: components["schemas"]["ProjectBaseModel"] | null;
      customer?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      extentType?: components["schemas"]["ExtentType"];
      /** Format: int32 */
      extent?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectAssignmentEditModel: {
      /** Format: int32 */
      projectAssignmentId: number;
      title: string;
      description?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: int32 */
      rate?: number | null;
      /** Format: int32 */
      extent?: number | null;
      /** Format: date-time */
      oralAgreementToDate?: string | null;
      /** Format: date-time */
      optionToDate?: string | null;
      contractType?: components["schemas"]["ContractType"];
      extentType?: components["schemas"]["ExtentType"];
      /** Format: int32 */
      currencyId?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Procent = 0
     *
     * Timmar = 1
     * @enum {integer}
     */
    ProjectAssignmentExtentType: 0 | 1;
    ProjectAssignmentFilterModel: {
      /** @description Pipeline Ids can be retrieved from the Project Pipelines endpoint */
      pipelines?: number[] | null;
      /**
       * @description 0 - Employee
       * 1 - Partner consultant
       * 2- Subcontractor
       */
      projectAssignmentMemberTypes?: components["schemas"]["ProjectAssignmentMemberType"][] | null;
      /**
       * @description 1 - Upcoming
       * 2 - Ongoing
       */
      projectAssignmentStatuses?: components["schemas"]["ProjectAssignmentStatus"][] | null;
      /** @description Team Id of Employee assigned to Role */
      teams?: number[] | null;
      /**
       * @description 0 - Open
       * 30 - Won
       * 40 - Lost
       * 50 - Abandoned
       * 60 - Suspended
       */
      projectStates?: components["schemas"]["ProjectState"][] | null;
      projectAssignmentAllocationStatuses?: components["schemas"]["ProjectAssignmentAllocationStatus"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * None = 0
     *
     * Preliminär = 1
     *
     * Tillsatt = 2
     *
     * Offererad = 3
     * @enum {integer}
     */
    ProjectAssignmentMemberAllocationStatus: 0 | 1 | 2 | 3;
    ProjectAssignmentMemberEmployeeAddModel: {
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      companyUserId: number;
      status: components["schemas"]["ProjectAssignmentAllocationStatus"];
    };
    ProjectAssignmentMemberEmployeeEditModel: {
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      id: number;
      state: components["schemas"]["ProjectAssignmentMemberState"];
      /** Format: int32 */
      companyUserId: number;
      status: components["schemas"]["ProjectAssignmentAllocationStatus"];
    };
    ProjectAssignmentMemberModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      /** Format: int32 */
      companyId?: number | null;
      /** Format: int32 */
      id?: number | null;
      seoId?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      companyUserType?: components["schemas"]["CompanyUserType"] | null;
      /** @description Obsolete */
      status?: components["schemas"]["CompanyUserStatus"] | null;
      /** Format: int32 */
      projectAssignmentMemberId?: number;
      projectAssignmentMemberState?: components["schemas"]["ProjectAssignmentMemberState"] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Tillagd = 0
     *
     * Offererad = 10
     *
     * Avböjd av kund = 20
     *
     * Avböjd av oss = 30
     *
     * Pausad = 40
     * @enum {integer}
     */
    ProjectAssignmentMemberState: 0 | 10 | 20 | 30 | 40;
    ProjectAssignmentMemberSubcontractorAddModel: {
      /** Format: int32 */
      groupId?: number | null;
      /** Format: int32 */
      currencyId?: number | null;
      /** Format: double */
      tariff?: number | null;
      /** Format: int32 */
      companyUserId: number;
      status: components["schemas"]["ProjectAssignmentAllocationStatus"];
    };
    ProjectAssignmentMemberSubcontractorEditModel: {
      /** Format: int32 */
      groupId?: number | null;
      /** Format: int32 */
      currencyId?: number | null;
      /** Format: double */
      tariff?: number | null;
      /** Format: int32 */
      id: number;
      state: components["schemas"]["ProjectAssignmentMemberState"];
      /** Format: int32 */
      companyUserId: number;
      status: components["schemas"]["ProjectAssignmentAllocationStatus"];
    };
    /**
     * Format: int32
     * @description
     *
     * Unspecified = 0
     *
     * Medarbetare = 1
     *
     * Partnerkonsult = 2
     *
     * Underkonsult = 3
     * @enum {integer}
     */
    ProjectAssignmentMemberType: 0 | 1 | 2 | 3;
    ProjectAssignmentModel: {
      company?: components["schemas"]["CompanyBaseModel"] | null;
      assigned?: components["schemas"]["ProjectAssignmentMemberModel"] | null;
      prospects?: components["schemas"]["ProjectAssignmentMemberModel"][] | null;
      seoId?: string | null;
      skills?: components["schemas"]["ProjectAssignmentSkillBaseModel"][] | null;
      /** Format: int32 */
      projectAssignmentMemberId?: number | null;
      /** Format: int32 */
      rate?: number | null;
      /** Format: date-time */
      oralAgreementToDate?: string | null;
      /** Format: date-time */
      optionToDate?: string | null;
      contractType?: components["schemas"]["ContractType"];
      isAssigned?: boolean;
      currency?: components["schemas"]["CurrencyModel"] | null;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number;
      project?: components["schemas"]["ProjectBaseModel"] | null;
      customer?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      extentType?: components["schemas"]["ExtentType"];
      /** Format: int32 */
      extent?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Öppen = 0
     *
     * Återkallad = 10
     *
     * Stängd = 20
     * @enum {integer}
     */
    ProjectAssignmentRequestStatus: 0 | 10 | 20;
    ProjectAssignmentSkillAddModel: {
      name: string;
      /** Format: int32 */
      keywordSynonymId?: number | null;
      /** Format: int32 */
      level?: number | null;
      isMandatory?: boolean | null;
    };
    ProjectAssignmentSkillBaseModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number;
      /** Format: int32 */
      projectAssignmentId?: number;
      /** Format: int32 */
      keywordId?: number;
      /** Format: int32 */
      level?: number;
      keyword?: components["schemas"]["KeywordModel"] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectAssignmentSkillEditModel: {
      name?: string | null;
      /** Format: int32 */
      level?: number | null;
      isMandatory?: boolean | null;
    };
    ProjectAssignmentSkillModel: {
      projectAssignment?: components["schemas"]["ProjectAssignmentBaseModel"] | null;
      project?: components["schemas"]["ProjectBaseModel"] | null;
      company?: components["schemas"]["CompanyBaseModel"] | null;
      customer?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      /** Format: int32 */
      keywordSynonymId?: number;
      keywordSynonym?: components["schemas"]["KeywordSynonymModel"] | null;
      isMandatory?: boolean;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number;
      /** Format: int32 */
      projectAssignmentId?: number;
      /** Format: int32 */
      keywordId?: number;
      /** Format: int32 */
      level?: number;
      keyword?: components["schemas"]["KeywordModel"] | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Inga datum valda = 0
     *
     * Kommande = 1
     *
     * Pågående = 2
     *
     * Avslutat = 3
     * @enum {integer}
     */
    ProjectAssignmentStatus: 0 | 1 | 2 | 3;
    ProjectAssignmentWithStatusModel: {
      /** Format: int32 */
      pipelineId?: number | null;
      projectPipelineStageTitle?: string | null;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number;
      /**
       * @description 0 - Open
       * 30 - Won
       * 40 - Lost
       * 50 - Abandoned
       * 60 - Suspended
       */
      projectState?: components["schemas"]["ProjectState"];
      /** Format: int32 */
      probability?: number;
      /**
       * Format: int32
       * @description Unspecified = 0,
       * Coming = 1,
       * Ongoing = 2,
       * Ended = 3
       */
      projectAssignmentId?: number;
      /**
       * @description None = 0,
       * Preliminary = 1,
       * Assigned = 2,
       */
      projectAssignmentAllocationStatus?: components["schemas"]["ProjectAssignmentMemberAllocationStatus"];
      /**
       * @description Unspecified = 0,
       * Employee = 1,
       * Partner Consultant = 2,
       * Subcontractor = 3
       */
      projectAssignmentMemberType?: components["schemas"]["ProjectAssignmentMemberType"];
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      optionToDate?: string | null;
      /** Format: date-time */
      oralAgreementToDate?: string | null;
      /** Format: int32 */
      projectAssignmentExtent?: number;
      /**
       * @description Percent = 0,
       * Hours = 1,
       */
      projectAssignmentExtentType?: components["schemas"]["ProjectAssignmentExtentType"];
      /** Format: int32 */
      rate?: number | null;
      /** Format: date-time */
      estimatedCloseDate?: string | null;
      assigned?: components["schemas"]["ProjectAssignmentMemberModel"] | null;
    };
    ProjectAttachmentModel: {
      /** Format: int32 */
      projectId?: number;
      attachmentType?: components["schemas"]["AttachmentType"];
      /** Format: int32 */
      companyId?: number | null;
      /** Format: uuid */
      id?: string | null;
      title?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectBaseModel: {
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      identifier?: string | null;
      customerIdentifier?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectEventBaseModel: {
      /** Format: int32 */
      projectId?: number | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectEventMeetingAddEditModel: {
      /** Format: int32 */
      customerId?: number;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      /**
       * @description The desired timezone to be used for StartDateTime and EndDateTime properties. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    ProjectEventMeetingModel: {
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number | null;
      /** Format: date-time */
      startDateTime?: string;
      /** Format: date-time */
      endDateTime?: string;
      location?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectEventModel: {
      /** Format: int32 */
      projectId?: number | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectEventNoteAddEditModel: {
      /** Format: int32 */
      customerId?: number;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /**
       * @description The desired timezone to be used for NoteDate property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    ProjectEventNoteModel: {
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number | null;
      noteType?: components["schemas"]["EventNoteType"] | null;
      /** Format: date-time */
      noteDate?: string | null;
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectEventTaskAddEditModel: {
      /** Format: int32 */
      customerId?: number;
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /**
       * @description The desired timezone to be used for DueDateTime property. Valid timezone ids can be found at https://nodatime.org/TimeZones
       * If empty, the timezone of the executing user (API account) will be used.
       */
      timezoneId?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      type?: components["schemas"]["EventType"];
      title: string;
      description?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
    };
    ProjectEventTaskModel: {
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      projectId?: number | null;
      /**
       * @description NotSpecified = 0
       * Phone = 1
       * Email = 2
       */
      taskType?: components["schemas"]["EventTaskType"] | null;
      hasTime?: boolean | null;
      /** Format: date-time */
      dueDateTime?: string | null;
      /** Format: int32 */
      assignedToCompanyUserId?: number | null;
      status?: components["schemas"]["EventStatusValue"];
      /** Format: int32 */
      createdByCompanyUserId?: number;
      /** Format: int32 */
      updatedByCompanyUserId?: number | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string | null;
      visibility?: components["schemas"]["EventVisibility"];
      comments?: components["schemas"]["EventCommentModel"][] | null;
      /**
       * @description Meeting = 0
       * Note = 1
       * Task = 2
       */
      type?: components["schemas"]["EventType"];
      /** Format: uuid */
      id?: string | null;
      /** Format: int32 */
      companyId?: number | null;
      title?: string | null;
      description?: string | null;
      /** Format: date-time */
      eventDate?: string;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectModel: {
      company?: components["schemas"]["CompanyBaseModel"] | null;
      customer?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      seoId?: string | null;
      /** Format: int32 */
      locationId?: number | null;
      googleId?: string | null;
      /** Format: int32 */
      probability?: number | null;
      /** Format: int32 */
      estimatedValue?: number | null;
      /** Format: date-time */
      estimatedCloseDate?: string | null;
      managers?: components["schemas"]["CompanyUserBaseModel"][] | null;
      /** @deprecated */
      salesManager?: components["schemas"]["CompanyUserBaseModel"] | null;
      salesManagers?: components["schemas"]["CompanyUserBaseModel"][] | null;
      intermediator?: components["schemas"]["CompanyCustomerBaseModel"] | null;
      events?: components["schemas"]["ProjectEventBaseModel"][] | null;
      customerContacts?: components["schemas"]["CompanyCustomerContactBaseModel"][] | null;
      intermediatorContacts?: components["schemas"]["CompanyCustomerContactBaseModel"][] | null;
      assignments?: components["schemas"]["ProjectAssignmentBaseModel"][] | null;
      attachments?: components["schemas"]["ProjectAttachmentModel"][] | null;
      tags?: components["schemas"]["CompanyTagBaseModel"][] | null;
      /** Format: int32 */
      pipelineId?: number | null;
      /** Format: int32 */
      currentStageId?: number | null;
      currency?: components["schemas"]["CurrencyModel"] | null;
      projectReferences?: components["schemas"]["ProjectReferenceModel"][] | null;
      /**
       * @description 0 = Open
       * 30 = Won
       * 40 = Lost
       * 50 = Abandoned
       * 60 = Suspended
       */
      currentState?: components["schemas"]["ProjectState"];
      stateHistory?: components["schemas"]["ProjectStateHistoryModel"][] | null;
      createdBy?: components["schemas"]["CompanyUserBaseModel"] | null;
      updatedBy?: components["schemas"]["CompanyUserBaseModel"] | null;
      /** Format: date-time */
      createdDateTime?: string;
      /** Format: date-time */
      updatedDateTime?: string | null;
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      stateReasonId?: number | null;
      /** @description List of sales managers employee ids */
      salesManagerIds?: number[] | null;
      /** @description List of project managers employee ids */
      projectManagerIds?: number[] | null;
      priority?: components["schemas"]["ProjectPriority"];
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      customerId?: number;
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      identifier?: string | null;
      customerIdentifier?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    ProjectPipelineModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      stages?: components["schemas"]["ProjectPipelineStageModel"][] | null;
    };
    ProjectPipelineStageModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      probability?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Låg = 3
     *
     * Medel = 5
     *
     * Hög = 8
     * @enum {integer}
     */
    ProjectPriority: 3 | 5 | 8;
    /**
     * Format: int32
     * @description
     *
     * CreatedDateTime = 0
     *
     * Title = 1
     *
     * Identifier = 2
     *
     * CustomerIdentifier = 3
     *
     * SeoId = 4
     *
     * UpdatedDateTime = 5
     *
     * LastTouchDateTime = 6
     * @enum {integer}
     */
    ProjectQuerySort: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    ProjectQuerySortPageAndSortByModel: {
      sortBy?: components["schemas"]["ProjectQuerySort"];
      /**
       * @description Ascending = 0 (Default)
       * Descending = 1
       */
      sortOrder?: components["schemas"]["SortOrder"];
      /**
       * Format: int32
       * @default 1
       */
      page?: number;
      /**
       * Format: int32
       * @default 15
       */
      itemsPerPage?: number;
    };
    ProjectReferenceModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      /** Format: int32 */
      projectId?: number;
      title?: string | null;
      text?: string | null;
      language?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Öppen = 0
     *
     * Vunnen = 30
     *
     * Förlorad = 40
     *
     * Avböjd = 50
     *
     * Uppskjuten = 60
     * @enum {integer}
     */
    ProjectState: 0 | 30 | 40 | 50 | 60;
    ProjectStateHistoryModel: {
      state?: components["schemas"]["ProjectState"];
      /** Format: date-time */
      updated?: string;
      reason?: components["schemas"]["ProjectStateReasonModel"] | null;
    };
    ProjectStateReasonModel: {
      /** Format: int32 */
      id?: number;
      title?: string | null;
      description?: string | null;
    };
    RecruitmentSourceModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number;
      name?: string | null;
    };
    ReferenceBlockItemModel: {
      firstName?: string | null;
      lastName?: string | null;
      email?: string | null;
      telephone?: string | null;
      company?: string | null;
      position?: string | null;
      text?: string | null;
      workExperience?: string | null;
      /** Format: int32 */
      workExperienceId?: number | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    ReferenceBlockModel: {
      hideDescription?: boolean;
      hideInEdit?: boolean;
      data?: components["schemas"]["ReferenceBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    ResumeModel: {
      presentation?: components["schemas"]["PresentationBlockModel"] | null;
      highlightedWorkExperience?: components["schemas"]["HighlightedWorkExperienceBlockModel"] | null;
      skillsByCategory?: components["schemas"]["SkillByCategoryBlockModel"] | null;
      topSkills?: components["schemas"]["TopSkillBlockModel"] | null;
      workExperience?: components["schemas"]["WorkExperienceBlockModel"] | null;
      skills?: components["schemas"]["SkillModelModel"] | null;
      employer?: components["schemas"]["EmployerBlockModel"] | null;
      training?: components["schemas"]["TrainingBlockModel"] | null;
      education?: components["schemas"]["EducationBlockModel"] | null;
      language?: components["schemas"]["LanguageBlockModel"] | null;
      commitment?: components["schemas"]["CommitmentBlockModel"] | null;
      extraSkills?: components["schemas"]["ExtraSkillBlockModel"] | null;
      reference?: components["schemas"]["ReferenceBlockModel"] | null;
      text?: components["schemas"]["TextBlockModel"] | null;
      /** Format: int32 */
      id?: number;
    };
    RoleModel: {
      /** Format: int32 */
      id?: number | null;
      name?: string | null;
      description?: string | null;
      level?: components["schemas"]["AccessLevel"] | null;
    };
    SearchCompanyCandidateQueryModel: {
      term?: string | null;
      /** Format: int32 */
      rating?: number | null;
      states?: components["schemas"]["CompanyCandidateState"][] | null;
      /** Format: int32 */
      pipeline?: number | null;
      noRecruiter?: boolean;
      recruiters?: number[] | null;
      teams?: number[] | null;
      sources?: number[] | null;
      pageAndSortBy?: components["schemas"]["CompanyCandidateQuerySortPageAndSortByModel"] | null;
    };
    SearchCompanyCandidateResultModel: {
      pagedAndSortedBy?: components["schemas"]["CompanyCandidateQuerySortPageAndSortByModel"] | null;
      result?: components["schemas"]["CompanyCandidateBaseModel"][] | null;
      /** Format: int32 */
      hits?: number;
      /** Format: int32 */
      totalItems?: number;
    };
    SearchCompanyCustomerContactQueryModel: {
      term?: string | null;
      managers?: number[] | null;
      customers?: number[] | null;
      tags?: number[] | null;
      pageAndSortBy?: components["schemas"]["CompanyCustomerContactQuerySortPageAndSortByModel"] | null;
    };
    SearchCompanyCustomerContactResultModel: {
      pagedAndSortedBy?: components["schemas"]["CompanyCustomerContactQuerySortPageAndSortByModel"] | null;
      result?: components["schemas"]["CompanyCustomerContactModel"][] | null;
      /** Format: int32 */
      hits?: number;
      /** Format: int32 */
      totalItems?: number;
    };
    SearchCompanyCustomerQueryModel: {
      name?: string | null;
      nameOperator?: components["schemas"]["StringComparisonOperator"];
      identification?: string | null;
      identificationOperator?: components["schemas"]["StringComparisonOperator"];
      corporateIdentityNumber?: string | null;
      corporateIdentityNumberOperator?: components["schemas"]["StringComparisonOperator"];
      pageAndSortBy?: components["schemas"]["CompanyCustomerQuerySortPageAndSortByModel"] | null;
    };
    SearchCompanyCustomerResultModel: {
      pagedAndSortedBy?: components["schemas"]["CompanyCustomerQuerySortPageAndSortByModel"] | null;
      result?: components["schemas"]["CompanyCustomerBaseModel"][] | null;
      /** Format: int32 */
      hits?: number;
      /** Format: int32 */
      totalItems?: number;
    };
    SearchCompanyUserQueryModel: {
      term?: string | null;
      pageAndSortBy?: components["schemas"]["CompanyUserQuerySortPageAndSortByModel"] | null;
    };
    SearchCompanyUserResultModel: {
      pagedAndSortedBy?: components["schemas"]["CompanyUserQuerySortPageAndSortByModel"] | null;
      result?: components["schemas"]["CompanyUserBaseModel"][] | null;
      /** Format: int32 */
      hits?: number;
      /** Format: int32 */
      totalItems?: number;
    };
    SearchProjectQueryModel: {
      title?: string | null;
      identification?: string | null;
      customerIdentifier?: string | null;
      corporateIdentityNumber?: string | null;
      /** Format: int32 */
      customerId?: number | null;
      pageAndSortBy?: components["schemas"]["ProjectQuerySortPageAndSortByModel"] | null;
      /** @description Your Project Pipelines can be retrieved from the GET ProjectPipelines endpoint */
      pipelines?: number[] | null;
      salesManagers?: number[] | null;
      customers?: number[] | null;
      intermediators?: number[] | null;
      /**
       * @description Open = 0,
       * Won = 30,
       * Lost = 40,
       * Abandoned = 50,
       * Suspended = 60
       */
      projectStates?: components["schemas"]["ProjectState"][] | null;
    };
    SearchProjectsResultModel: {
      pagedAndSortedBy?: components["schemas"]["ProjectQuerySortPageAndSortByModel"] | null;
      result?: components["schemas"]["ProjectBaseModel"][] | null;
      /** Format: int32 */
      hits?: number;
      /** Format: int32 */
      totalItems?: number;
    };
    SearchSkillModel: {
      /** Format: int32 */
      keywordId?: number | null;
      /** Format: int32 */
      min?: number | null;
      /** Format: int32 */
      max?: number | null;
    };
    SearchSkillQueryModel: {
      skills?: components["schemas"]["SearchSkillModel"][] | null;
      filters?: components["schemas"]["FilterModel"][] | null;
    };
    SearchSkillResultModel: {
      query?: components["schemas"]["SearchSkillQueryModel"] | null;
      hits?: components["schemas"]["CompanyUserSearchSkillModel"][] | null;
    };
    SkillBlockItemModel: {
      name?: string | null;
      /** Format: int32 */
      level?: number;
      /** Format: int32 */
      keywordTypeId?: number | null;
      keywordTypeName?: string | null;
      /** Format: int32 */
      numberOfDaysWorkExperience?: number | null;
      /** Format: date-time */
      lastWorkExperienceDate?: string | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    SkillByCategoryBlockItemModel: {
      /** Format: int32 */
      keywordTypeId?: number | null;
      name?: string | null;
      description?: string | null;
      skills?: components["schemas"]["SkillBlockItemModel"][] | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    SkillByCategoryBlockModel: {
      data?: components["schemas"]["SkillByCategoryBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    SkillModelModel: {
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      data?: components["schemas"]["SkillBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    SkillResultModel: {
      /** Format: int32 */
      keywordId?: number | null;
      /** Format: int32 */
      keywordSynonymId?: number | null;
      keywordSynonymName?: string | null;
      /** Format: int32 */
      masterSynonymId?: number | null;
      masterSynonymName?: string | null;
      /** Format: int32 */
      level?: number | null;
    };
    SkillSearchQueryTermModel: {
      term: string;
      /** Format: int32 */
      min?: number | null;
      /** Format: int32 */
      max?: number | null;
      /** Format: int32 */
      limit?: number | null;
    };
    /**
     * Format: int32
     * @description 0 - Ascending,
     * 1 - Descending
     * @enum {integer}
     */
    SortOrder: 0 | 1;
    /**
     * Format: int32
     * @description
     *
     * Inaktiv = 0
     *
     * Aktiv = 1
     * @enum {integer}
     */
    Status: 0 | 1;
    /**
     * Format: int32
     * @description
     *
     * Contains = 0
     *
     * StartsWith = 1
     *
     * EndsWith = 2
     *
     * Equals = 3
     * @enum {integer}
     */
    StringComparisonOperator: 0 | 1 | 2 | 3;
    TeamAddEditModel: {
      name?: string | null;
      description?: string | null;
      internalIdentification?: string | null;
      corporateIdentityNumber?: string | null;
      costCenter?: string | null;
      /** Format: int32 */
      parentTeamId?: number | null;
      /** Format: int32 */
      locationId?: number | null;
    };
    TeamBaseModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number | null;
      name?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    TeamManagerEditModel: {
      /** Format: int32 */
      teamId?: number;
      /** Format: int32 */
      companyUserId?: number;
    };
    TeamManagerModel: {
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      companyUser?: components["schemas"]["CompanyUserBaseModel"] | null;
      team?: components["schemas"]["TeamBaseModel"] | null;
    };
    TeamMemberAddModel: {
      /** Format: int32 */
      companyUserId?: number;
      /** Format: int32 */
      availabilityPercent?: number | null;
    };
    TeamMemberEditModel: {
      /** Format: int32 */
      availabilityPercent?: number | null;
    };
    TeamMemberModel: {
      /** Format: int32 */
      teamId?: number | null;
      /** Format: int32 */
      companyUserId?: number | null;
      companyUser?: components["schemas"]["CompanyUserBaseModel"] | null;
      team?: components["schemas"]["TeamBaseModel"] | null;
      /** Format: int32 */
      availabilityPercent?: number | null;
      links?: components["schemas"]["Link"][] | null;
    };
    TeamMemberMoveModel: {
      /** Format: int32 */
      toTeamId: number;
    };
    TeamModel: {
      internalIdentification?: string | null;
      corporateIdentityNumber?: string | null;
      costCenter?: string | null;
      location?: string | null;
      /** Format: int32 */
      parentTeamId?: number | null;
      /** Format: date-time */
      created?: string | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      companyId?: number | null;
      name?: string | null;
      description?: string | null;
      links?: components["schemas"]["Link"][] | null;
    };
    TextBlockModel: {
      description?: string | null;
      text?: string | null;
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    TopSkillBlockItemModel: {
      name?: string | null;
      /** Format: int32 */
      level?: number | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    TopSkillBlockModel: {
      useLevel?: boolean;
      /** Format: int32 */
      minValue?: number;
      /** Format: int32 */
      maxValue?: number;
      /** Format: int32 */
      numberOfItemsInList?: number;
      data?: components["schemas"]["TopSkillBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    TrainingBlockModel: {
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      data?: components["schemas"]["TrainingItemBlockModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
    TrainingItemBlockModel: {
      trainingType?: components["schemas"]["TrainingType"];
      url?: string | null;
      title?: string | null;
      description?: string | null;
      issuer?: string | null;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    /**
     * Format: int32
     * @description
     *
     * Kurs = 0
     *
     * Certifiering = 1
     * @enum {integer}
     */
    TrainingType: 0 | 1;
    UpdatedModel: {
      /** Format: int32 */
      companyUserId?: number | null;
      firstName?: string | null;
      lastName?: string | null;
      /** Format: date-time */
      time?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * Ej angiven = 0
     *
     * Man = 1
     *
     * Kvinna = 2
     * @enum {integer}
     */
    UserGender: 0 | 1 | 2;
    ValidationModel: {
      /** @description Collection of validation errors */
      errors?: {
        [key: string]: (string[] | null) | undefined;
      } | null;
    };
    WebhookAddModel: {
      /** Format: int32 */
      companyId?: number | null;
      isActive?: boolean;
      endpointUrl?: string | null;
      configurations?: components["schemas"]["WebhookConfigurationAddModel"][] | null;
      credentials?: components["schemas"]["WebhookCredentialsAddModel"][] | null;
    };
    WebhookConfigurationAddModel: {
      entityType?: components["schemas"]["WebhookEntityType"];
      actionType?: components["schemas"]["ActionType"];
    };
    WebhookConfigurationModel: {
      entityType?: components["schemas"]["WebhookEntityType"];
      actionType?: components["schemas"]["ActionType"];
    };
    WebhookCredentialsAddModel: {
      headerValue?: string | null;
      isBasicAuthentication?: boolean | null;
      headerName?: string | null;
    };
    WebhookCredentialsModel: {
      isBasicAuthentication?: boolean | null;
      headerName?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * All = 1
     *
     * CompanyCandidate = 2
     *
     * CompanyEmployee = 3
     *
     * CompanySubcontractor = 4
     *
     * CompanyCustomer = 5
     *
     * CompanyProject = 6
     *
     * Role = 7
     *
     * PublicAnnouncement = 8
     *
     * Absence = 9
     *
     * CompanyCustomerContact = 10
     * @enum {integer}
     */
    WebhookEntityType: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
    WebhookModel: {
      /** Format: uuid */
      id?: string;
      isActive?: boolean;
      endpointUrl?: string | null;
      configurations?: components["schemas"]["WebhookConfigurationModel"][] | null;
      credentials?: components["schemas"]["WebhookCredentialsModel"][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * None = 0
     *
     * GroupDocs = 1
     *
     * Aspose = 2
     * @enum {integer}
     */
    WordEngineType: 0 | 1 | 2;
    WorkExperienceBlockItemModel: {
      skills?: components["schemas"]["SkillBlockItemModel"][] | null;
      title?: string | null;
      description?: string | null;
      employer?: string | null;
      location?: components["schemas"]["LocationBlockModel"] | null;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string | null;
      url?: string | null;
      logotype?: components["schemas"]["ImageBlockModel"] | null;
      /** Format: int32 */
      parentBlockItemId?: number | null;
      parentBlockItemUpdated?: boolean | null;
      /** Format: int32 */
      profileTranslationId?: number | null;
      /** Format: date-time */
      updated?: string | null;
      /** Format: date-time */
      discarded?: string | null;
      /** Format: uuid */
      id?: string;
      disabled?: boolean;
    };
    WorkExperienceBlockModel: {
      /** @deprecated */
      skillsHeading?: string | null;
      subHeading?: string | null;
      hideSubHeading?: boolean;
      hideInEdit?: boolean;
      hideTitle?: boolean;
      hideDescription?: boolean;
      hideText?: boolean;
      useLogotype?: boolean;
      data?: components["schemas"]["WorkExperienceBlockItemModel"][] | null;
      /** Format: uuid */
      blockId?: string;
      /** Format: date-time */
      updated?: string | null;
      heading?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {
  /** Get absence period by id */
  Absence: {
    parameters: {
      path: {
        /** @description Your company id */
        companyId: number;
        /** @description The id of the actual user */
        companyUserId: number;
        /** @description The id for the requested absence period */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["AbsencePeriodModel"];
          "application/json": components["schemas"]["AbsencePeriodModel"];
          "text/json": components["schemas"]["AbsencePeriodModel"];
          "application/xml": components["schemas"]["AbsencePeriodModel"];
          "text/xml": components["schemas"]["AbsencePeriodModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Absence Item for User */
  UpdateAbsence: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Absence Id */
        id: number;
      };
    };
    /** @description CompanyUserProfileCommitmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["AbsenceAddEditModel"];
        "application/json": components["schemas"]["AbsenceAddEditModel"];
        "text/json": components["schemas"]["AbsenceAddEditModel"];
        "application/*+json": components["schemas"]["AbsenceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["AbsencePeriodModel"];
          "application/json": components["schemas"]["AbsencePeriodModel"];
          "text/json": components["schemas"]["AbsencePeriodModel"];
          "application/xml": components["schemas"]["AbsencePeriodModel"];
          "text/xml": components["schemas"]["AbsencePeriodModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete absence */
  DeleteAbsence: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        companyUserId: number;
        /** @description Customer Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get absence period by company user id */
  Absences: {
    parameters: {
      path: {
        /** @description Your Cinode Company id */
        companyId: number;
        /** @description The id of the actual User */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["AbsencePeriodDtoModel"][];
          "application/json": components["schemas"]["AbsencePeriodDtoModel"][];
          "text/json": components["schemas"]["AbsencePeriodDtoModel"][];
          "application/xml": components["schemas"]["AbsencePeriodDtoModel"][];
          "text/xml": components["schemas"]["AbsencePeriodDtoModel"][];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Absence Item for User */
  NewAbsence: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileCommitmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["AbsenceAddEditModel"];
        "application/json": components["schemas"]["AbsenceAddEditModel"];
        "text/json": components["schemas"]["AbsenceAddEditModel"];
        "application/*+json": components["schemas"]["AbsenceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["AbsencePeriodModel"];
          "application/json": components["schemas"]["AbsencePeriodModel"];
          "text/json": components["schemas"]["AbsencePeriodModel"];
          "application/xml": components["schemas"]["AbsencePeriodModel"];
          "text/xml": components["schemas"]["AbsencePeriodModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get absence types for company */
  AbsenceTypes: {
    parameters: {
      path: {
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["AbsenceTypeModel"][];
          "application/json": components["schemas"]["AbsenceTypeModel"][];
          "text/json": components["schemas"]["AbsenceTypeModel"][];
          "application/xml": components["schemas"]["AbsenceTypeModel"][];
          "text/xml": components["schemas"]["AbsenceTypeModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get availability for company users. Omitting companyUserId gets availability for all company users in company. */
  SearchAvailability: {
    parameters: {
      path: {
        /** @description Your Cinode Company id */
        companyId: number;
      };
    };
    /** @description Filter options */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["AvailabilityFilterModel"];
        "application/json": components["schemas"]["AvailabilityFilterModel"];
        "text/json": components["schemas"]["AvailabilityFilterModel"];
        "application/*+json": components["schemas"]["AvailabilityFilterModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["AvailabilityModel"][];
          "application/json": components["schemas"]["AvailabilityModel"][];
          "text/json": components["schemas"]["AvailabilityModel"][];
          "application/xml": components["schemas"]["AvailabilityModel"][];
          "text/xml": components["schemas"]["AvailabilityModel"][];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company by id */
  Company: {
    parameters: {
      path: {
        /** @description CompanyId */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyModel"];
          "application/json": components["schemas"]["CompanyModel"];
          "text/json": components["schemas"]["CompanyModel"];
          "application/xml": components["schemas"]["CompanyModel"];
          "text/xml": components["schemas"]["CompanyModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company users list for an address */
  CompanyAddressUsers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Address Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Candidate by Id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  Candidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Candidate Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/xml": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/xml": components["schemas"]["CompanyCandidateExtendedModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete candidate from the system
   * This action is irreversible, use with caution
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  DeleteCompanyCandidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Candidate Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Patch company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  PatchCompanyCandidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Candidate Id */
        id: number;
      };
    };
    /** @description Only certain properties on the user are patchable. See the generated example for a list of available properties, using the `op: "replace"` as example. See the generated schema for `ICompanyCandidatePatchDocument` for full type information per property */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "value": 0,
         *     "path": "/pipelineid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/pipelinestageid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/recruitmentmanagerid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/state",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "2023-05-02T12:20:46.2774737+02:00",
         *     "path": "/availablefromdate",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/campaigncode",
         *     "op": "replace"
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["JsonPatchDocument"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/xml": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/xml": components["schemas"]["CompanyCandidateExtendedModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Candidates
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  Candidates: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateBaseModel"][];
          "application/json": components["schemas"]["CompanyCandidateBaseModel"][];
          "text/json": components["schemas"]["CompanyCandidateBaseModel"][];
          "application/xml": components["schemas"]["CompanyCandidateBaseModel"][];
          "text/xml": components["schemas"]["CompanyCandidateBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Create Candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  AddCompanyCandidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description CompanyCandidateAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCandidateAddModel"];
        "application/json": components["schemas"]["CompanyCandidateAddModel"];
        "text/json": components["schemas"]["CompanyCandidateAddModel"];
        "application/*+json": components["schemas"]["CompanyCandidateAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/json": components["schemas"]["CompanyCandidateExtendedModel"];
          "application/xml": components["schemas"]["CompanyCandidateExtendedModel"];
          "text/xml": components["schemas"]["CompanyCandidateExtendedModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Invite the CompanyCandidate to create their own Cinode account
   * A email is sent with your message and details for how to login
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  InviteCandidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Candidate Id */
        id: number;
      };
    };
    /** @description Model with data about the candidate needed for the invitation */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCandidateAddInviteModel"];
        "application/json": components["schemas"]["CompanyCandidateAddInviteModel"];
        "text/json": components["schemas"]["CompanyCandidateAddInviteModel"];
        "application/*+json": components["schemas"]["CompanyCandidateAddInviteModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates event by id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateEvent: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventModel"];
          "application/json": components["schemas"]["CompanyCandidateEventModel"];
          "text/json": components["schemas"]["CompanyCandidateEventModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates meeting event with specified id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update meeting event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  UpdateCompanyCandidateEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description Meeting Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventMeetingAddEditModel"];
        "application/json": components["schemas"]["EventMeetingAddEditModel"];
        "text/json": components["schemas"]["EventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["EventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete company candidate meeting event
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  DeleteCompanyCandidateEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates events meetings list
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateMeetingEventList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add new meeting event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  NewCompanyCandidateEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    /** @description Meeting Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventMeetingAddEditModel"];
        "application/json": components["schemas"]["EventMeetingAddEditModel"];
        "text/json": components["schemas"]["EventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["EventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/json": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates note event with specified id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update note event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  UpdateCompanyCandidateEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description Note Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventNoteAddEditModel"];
        "application/json": components["schemas"]["EventNoteAddEditModel"];
        "text/json": components["schemas"]["EventNoteAddEditModel"];
        "application/*+json": components["schemas"]["EventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete company candidate note event
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  DeleteCompanyCandidateEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates events notes list
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateNoteEventList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add new note event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  NewCompanyCandidateEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    /** @description Note Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventNoteAddEditModel"];
        "application/json": components["schemas"]["EventNoteAddEditModel"];
        "text/json": components["schemas"]["EventNoteAddEditModel"];
        "application/*+json": components["schemas"]["EventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/json": components["schemas"]["CompanyCandidateEventNoteModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates events list
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateEvents: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates task event with specified id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update task event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  UpdateCompanyCandidateEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description Task Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventTaskAddEditModel"];
        "application/json": components["schemas"]["EventTaskAddEditModel"];
        "text/json": components["schemas"]["EventTaskAddEditModel"];
        "application/*+json": components["schemas"]["EventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete company candidate task event
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  DeleteCompanyCandidateEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates events tasks list
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CompanyCandidateTaskEventList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/json": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyCandidateEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add new task event for company candidate
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  NewCompanyCandidateEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    /** @description Task Event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["EventTaskAddEditModel"];
        "application/json": components["schemas"]["EventTaskAddEditModel"];
        "text/json": components["schemas"]["EventTaskAddEditModel"];
        "application/*+json": components["schemas"]["EventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/json": components["schemas"]["CompanyCandidateEventTaskModel"];
          "application/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
          "text/xml": components["schemas"]["CompanyCandidateEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Candidate File Attachment by Id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  GetCandidateAttachment: {
    parameters: {
      path: {
        id: number;
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Upload Candidate File Attachment
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CandidateAttachment: {
    parameters: {
      path: {
        /** @description Candidate Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          Files: string[];
          Title: string;
          Description?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateFileAttachmentListModel"];
          "application/json": components["schemas"]["CompanyCandidateFileAttachmentListModel"];
          "text/json": components["schemas"]["CompanyCandidateFileAttachmentListModel"];
          "application/xml": components["schemas"]["CompanyCandidateFileAttachmentListModel"];
          "text/xml": components["schemas"]["CompanyCandidateFileAttachmentListModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get candidate pipelines
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CandidatePipelines: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidatePipelineModel"][];
          "application/json": components["schemas"]["CompanyCandidatePipelineModel"][];
          "text/json": components["schemas"]["CompanyCandidatePipelineModel"][];
          "application/xml": components["schemas"]["CompanyCandidatePipelineModel"][];
          "text/xml": components["schemas"]["CompanyCandidatePipelineModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add a Skill to company candidate
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/candidates/19870/skills
   *     {
   *         "name": "SQL",
   *         "companyCandidateId": 19870,
   *         "keywordSynonymId": 577,
   *         "languageId":1
   *     }
   */
  NewCompanyCandidateSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
      };
    };
    /** @description CompanyCandidateSkillAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCandidateSkillAddModel"];
        "application/json": components["schemas"]["CompanyCandidateSkillAddModel"];
        "text/json": components["schemas"]["CompanyCandidateSkillAddModel"];
        "application/*+json": components["schemas"]["CompanyCandidateSkillAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateSkillModel"];
          "application/json": components["schemas"]["CompanyCandidateSkillModel"];
          "text/json": components["schemas"]["CompanyCandidateSkillModel"];
          "application/xml": components["schemas"]["CompanyCandidateSkillModel"];
          "text/xml": components["schemas"]["CompanyCandidateSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Candidate Skill
   * @description Sample request:
   *
   *     DELETE /v0.1/companies/1/candidates/19870/skills/577
   */
  DeleteCompanyCandidateSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CandidateId Id */
        candidateId: number;
        /** @description Skill Keyword Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Candidate Uri (Link)
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  CandidateUriAttachment: {
    parameters: {
      path: {
        /** @description Candidate Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCandidateUriAttachmentAddModel"];
        "application/json": components["schemas"]["CompanyCandidateUriAttachmentAddModel"];
        "text/json": components["schemas"]["CompanyCandidateUriAttachmentAddModel"];
        "application/*+json": components["schemas"]["CompanyCandidateUriAttachmentAddModel"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "application/json": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "text/json": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "application/xml": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "text/xml": components["schemas"]["CompanyCandidateUriAttachmentModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Candidate Uri Attachment by Id
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  GetCandidateUriAttachment: {
    parameters: {
      path: {
        id: number;
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "application/json": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "text/json": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "application/xml": components["schemas"]["CompanyCandidateUriAttachmentModel"];
          "text/xml": components["schemas"]["CompanyCandidateUriAttachmentModel"];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Candidate Uri (Link)
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  DeleteCandidateUriAttachment: {
    parameters: {
      path: {
        /** @description Candidate Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company capabilities */
  CompanyCapabilities: {
    parameters: {
      path: {
        /** @description CompanyId */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCapabilitiesModel"];
          "application/json": components["schemas"]["CompanyCapabilitiesModel"];
          "text/json": components["schemas"]["CompanyCapabilitiesModel"];
          "application/xml": components["schemas"]["CompanyCapabilitiesModel"];
          "text/xml": components["schemas"]["CompanyCapabilitiesModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company currencies */
  CompanyCurrencies: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CurrencyModel"][];
          "application/json": components["schemas"]["CurrencyModel"][];
          "text/json": components["schemas"]["CurrencyModel"][];
          "application/xml": components["schemas"]["CurrencyModel"][];
          "text/xml": components["schemas"]["CurrencyModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company customer by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  GetCompanyCustomer: {
    parameters: {
      path: {
        companyId: number;
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerModel"];
          "application/json": components["schemas"]["CompanyCustomerModel"];
          "text/json": components["schemas"]["CompanyCustomerModel"];
          "application/xml": components["schemas"]["CompanyCustomerModel"];
          "text/xml": components["schemas"]["CompanyCustomerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update company customer
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  UpdateCompanyCustomer: {
    parameters: {
      path: {
        id: number;
        companyId: number;
      };
    };
    /** @description CompanyCustomerAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerEditModel"];
        "application/json": components["schemas"]["CompanyCustomerEditModel"];
        "text/json": components["schemas"]["CompanyCustomerEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerModel"];
          "application/json": components["schemas"]["CompanyCustomerModel"];
          "text/json": components["schemas"]["CompanyCustomerModel"];
          "application/xml": components["schemas"]["CompanyCustomerModel"];
          "text/xml": components["schemas"]["CompanyCustomerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteCompanyCustomer: {
    parameters: {
      path: {
        /** @description Customer Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description CompanyCustomerDeleteModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerDeleteModel"];
        "application/json": components["schemas"]["CompanyCustomerDeleteModel"];
        "text/json": components["schemas"]["CompanyCustomerDeleteModel"];
        "application/*+json": components["schemas"]["CompanyCustomerDeleteModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Patch company customer
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  PatchCompanyCustomer: {
    parameters: {
      path: {
        /** @description Customer Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description Patch of CompanyCustomerPatchModel */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "value": false,
         *     "path": "/status",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/name",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/description",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/corporateidentitynumber",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/vatnumber",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/identification",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/email",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/homepage",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/phone",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/fax",
         *     "op": "replace"
         *   },
         *   {
         *     "value": false,
         *     "path": "/intermediator",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/size",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/countryid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/turnover",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/turnovercurrencyid",
         *     "op": "replace"
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["JsonPatchDocument"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerModel"];
          "application/json": components["schemas"]["CompanyCustomerModel"];
          "text/json": components["schemas"]["CompanyCustomerModel"];
          "application/xml": components["schemas"]["CompanyCustomerModel"];
          "text/xml": components["schemas"]["CompanyCustomerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company customers list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerBaseModel"][];
          "application/json": components["schemas"]["CompanyCustomerBaseModel"][];
          "text/json": components["schemas"]["CompanyCustomerBaseModel"][];
          "application/xml": components["schemas"]["CompanyCustomerBaseModel"][];
          "text/xml": components["schemas"]["CompanyCustomerBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add company customer
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewCompanyCustomer: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description CompanyCustomerAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerAddModel"];
        "application/json": components["schemas"]["CompanyCustomerAddModel"];
        "text/json": components["schemas"]["CompanyCustomerAddModel"];
        "application/*+json": components["schemas"]["CompanyCustomerAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerModel"];
          "application/json": components["schemas"]["CompanyCustomerModel"];
          "text/json": components["schemas"]["CompanyCustomerModel"];
          "application/xml": components["schemas"]["CompanyCustomerModel"];
          "text/xml": components["schemas"]["CompanyCustomerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer address by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CustomerAddress: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Address Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerAddressModel"];
          "application/json": components["schemas"]["CompanyCustomerAddressModel"];
          "text/json": components["schemas"]["CompanyCustomerAddressModel"];
          "application/xml": components["schemas"]["CompanyCustomerAddressModel"];
          "text/xml": components["schemas"]["CompanyCustomerAddressModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update customer address
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  EditCompanyCustomerAddress: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Customer Address Id */
        id: number;
      };
    };
    /** @description CompanyCustomerAddressAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "application/json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "text/json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerAddressModel"];
          "application/json": components["schemas"]["CompanyCustomerAddressModel"];
          "text/json": components["schemas"]["CompanyCustomerAddressModel"];
          "application/xml": components["schemas"]["CompanyCustomerAddressModel"];
          "text/xml": components["schemas"]["CompanyCustomerAddressModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer address
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteCompanyCustomerAddress: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Address Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer address
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewCompanyCustomerAddress: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CompanyCustomerAddressAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "application/json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "text/json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerAddressAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerAddressModel"];
          "application/json": components["schemas"]["CompanyCustomerAddressModel"];
          "text/json": components["schemas"]["CompanyCustomerAddressModel"];
          "application/xml": components["schemas"]["CompanyCustomerAddressModel"];
          "text/xml": components["schemas"]["CompanyCustomerAddressModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer contact by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  Contact: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Contact Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerContactModel"];
          "application/json": components["schemas"]["CompanyCustomerContactModel"];
          "text/json": components["schemas"]["CompanyCustomerContactModel"];
          "application/xml": components["schemas"]["CompanyCustomerContactModel"];
          "text/xml": components["schemas"]["CompanyCustomerContactModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update customer contact
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  EditCompanyCustomerContact: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Contact Id */
        id: number;
      };
    };
    /** @description CompanyCustomerContactAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "application/json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "text/json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerContactAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerContactModel"];
          "application/json": components["schemas"]["CompanyCustomerContactModel"];
          "text/json": components["schemas"]["CompanyCustomerContactModel"];
          "application/xml": components["schemas"]["CompanyCustomerContactModel"];
          "text/xml": components["schemas"]["CompanyCustomerContactModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer contact
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteCompanyCustomerContact: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Contact Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer contact list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  Contacts: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerContactModel"][];
          "application/json": components["schemas"]["CompanyCustomerContactModel"][];
          "text/json": components["schemas"]["CompanyCustomerContactModel"][];
          "application/xml": components["schemas"]["CompanyCustomerContactModel"][];
          "text/xml": components["schemas"]["CompanyCustomerContactModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer contact
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewCompanyCustomerContact: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CompanyCustomerContactAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "application/json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "text/json": components["schemas"]["CompanyCustomerContactAddEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerContactAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerContactModel"];
          "application/json": components["schemas"]["CompanyCustomerContactModel"];
          "text/json": components["schemas"]["CompanyCustomerContactModel"];
          "application/xml": components["schemas"]["CompanyCustomerContactModel"];
          "text/xml": components["schemas"]["CompanyCustomerContactModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Tags for CustomerContact
   * @description Note:
   *
   *     Posted tags will replace any existing tags for the contact.
   *     A new tag will be created if the Id for a tag is not provided.
   *
   * Sample request:
   *
   *     POST /v0.1/companies/1/customers/19870/contacts/5360/tags
   *     [
   *         {
   *             "name": "tag-name",
   *             "id": 2
   *         },
   *         {
   *             "name": "tag-test",
   *             "id": 1
   *         },
   *     ]
   */
  EditCustomerContactTags: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description CustomerContact Id */
        contactId: number;
      };
    };
    /** @description CompanyTagModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyTagModel"][];
        "application/json": components["schemas"]["CompanyTagModel"][];
        "text/json": components["schemas"]["CompanyTagModel"][];
        "application/*+json": components["schemas"]["CompanyTagModel"][];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyTagModel"][];
          "application/json": components["schemas"]["CompanyTagModel"][];
          "text/json": components["schemas"]["CompanyTagModel"][];
          "application/xml": components["schemas"]["CompanyTagModel"][];
          "text/xml": components["schemas"]["CompanyTagModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEvent: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventModel"];
          "application/json": components["schemas"]["CustomerEventModel"];
          "text/json": components["schemas"]["CustomerEventModel"];
          "application/xml": components["schemas"]["CustomerEventModel"];
          "text/xml": components["schemas"]["CustomerEventModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer events list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEvents: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventBaseModel"][];
          "application/json": components["schemas"]["CustomerEventBaseModel"][];
          "text/json": components["schemas"]["CustomerEventBaseModel"][];
          "application/xml": components["schemas"]["CustomerEventBaseModel"][];
          "text/xml": components["schemas"]["CustomerEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event meeting by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventMeetingModel"];
          "application/json": components["schemas"]["CustomerEventMeetingModel"];
          "text/json": components["schemas"]["CustomerEventMeetingModel"];
          "application/xml": components["schemas"]["CustomerEventMeetingModel"];
          "text/xml": components["schemas"]["CustomerEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update customer event meeting
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  UpdateMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description CustomerEventMeetingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventMeetingModel"];
          "application/json": components["schemas"]["CustomerEventMeetingModel"];
          "text/json": components["schemas"]["CustomerEventMeetingModel"];
          "application/xml": components["schemas"]["CustomerEventMeetingModel"];
          "text/xml": components["schemas"]["CustomerEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer event meeting
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event meetings list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventMeetings: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventBaseModel"][];
          "application/json": components["schemas"]["CustomerEventBaseModel"][];
          "text/json": components["schemas"]["CustomerEventBaseModel"][];
          "application/xml": components["schemas"]["CustomerEventBaseModel"][];
          "text/xml": components["schemas"]["CustomerEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer event meeting
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CustomerEventMeetingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CustomerEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CustomerEventMeetingModel"];
          "application/json": components["schemas"]["CustomerEventMeetingModel"];
          "text/json": components["schemas"]["CustomerEventMeetingModel"];
          "application/xml": components["schemas"]["CustomerEventMeetingModel"];
          "text/xml": components["schemas"]["CustomerEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event note by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventNoteModel"];
          "application/json": components["schemas"]["CustomerEventNoteModel"];
          "text/json": components["schemas"]["CustomerEventNoteModel"];
          "application/xml": components["schemas"]["CustomerEventNoteModel"];
          "text/xml": components["schemas"]["CustomerEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update customer event note
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  UpdateNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description CustomerEventMeetingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "application/json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "text/json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventNoteModel"];
          "application/json": components["schemas"]["CustomerEventNoteModel"];
          "text/json": components["schemas"]["CustomerEventNoteModel"];
          "application/xml": components["schemas"]["CustomerEventNoteModel"];
          "text/xml": components["schemas"]["CustomerEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer event note
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event notes list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventNotes: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventBaseModel"][];
          "application/json": components["schemas"]["CustomerEventBaseModel"][];
          "text/json": components["schemas"]["CustomerEventBaseModel"][];
          "application/xml": components["schemas"]["CustomerEventBaseModel"][];
          "text/xml": components["schemas"]["CustomerEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer event note
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CustomerEventNoteAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "application/json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "text/json": components["schemas"]["CustomerEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CustomerEventNoteModel"];
          "application/json": components["schemas"]["CustomerEventNoteModel"];
          "text/json": components["schemas"]["CustomerEventNoteModel"];
          "application/xml": components["schemas"]["CustomerEventNoteModel"];
          "text/xml": components["schemas"]["CustomerEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event task by id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventTaskModel"];
          "application/json": components["schemas"]["CustomerEventTaskModel"];
          "text/json": components["schemas"]["CustomerEventTaskModel"];
          "application/xml": components["schemas"]["CustomerEventTaskModel"];
          "text/xml": components["schemas"]["CustomerEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update customer event task
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  UpdateTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description CustomerEventTaskAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "application/json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "text/json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventTaskModel"];
          "application/json": components["schemas"]["CustomerEventTaskModel"];
          "text/json": components["schemas"]["CustomerEventTaskModel"];
          "application/xml": components["schemas"]["CustomerEventTaskModel"];
          "text/xml": components["schemas"]["CustomerEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete customer event task
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  DeleteTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer event tasks list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerEventTasks: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventBaseModel"][];
          "application/json": components["schemas"]["CustomerEventBaseModel"][];
          "text/json": components["schemas"]["CustomerEventBaseModel"][];
          "application/xml": components["schemas"]["CustomerEventBaseModel"][];
          "text/xml": components["schemas"]["CustomerEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer event task
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  NewTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CustomerEventTaskAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "application/json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "text/json": components["schemas"]["CustomerEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CustomerEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CustomerEventTaskModel"];
          "application/json": components["schemas"]["CustomerEventTaskModel"];
          "text/json": components["schemas"]["CustomerEventTaskModel"];
          "application/xml": components["schemas"]["CustomerEventTaskModel"];
          "text/xml": components["schemas"]["CustomerEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer file attachment by Id
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  GetCustomerAttachment: {
    parameters: {
      path: {
        id: number;
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get customer managers
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CompanyCustomerManagers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerManagerModel"][];
          "application/json": components["schemas"]["CompanyCustomerManagerModel"][];
          "text/json": components["schemas"]["CompanyCustomerManagerModel"][];
          "application/xml": components["schemas"]["CompanyCustomerManagerModel"][];
          "text/xml": components["schemas"]["CompanyCustomerManagerModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add customer responsible
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/customers/22228/managers
   *     {
   *         [
   *            51096
   *         ]
   *     }
   */
  AddCompanyCustomerResponsible: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CompanyCustomerManagersAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyCustomerManagersAddEditModel"];
        "application/json": components["schemas"]["CompanyCustomerManagersAddEditModel"];
        "text/json": components["schemas"]["CompanyCustomerManagersAddEditModel"];
        "application/*+json": components["schemas"]["CompanyCustomerManagersAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerManagerModel"][];
          "application/json": components["schemas"]["CompanyCustomerManagerModel"][];
          "text/json": components["schemas"]["CompanyCustomerManagerModel"][];
          "application/xml": components["schemas"]["CompanyCustomerManagerModel"][];
          "text/xml": components["schemas"]["CompanyCustomerManagerModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Remove customer responsible
   * @description Sample request:
   *
   *     DELETE /v0.1/companies/1/customers/22228/managers/54632
   */
  RemoveCustomerManager: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
        /** @description User Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get extended company customers list
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  CustomersExtended: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerExtendedModel"][];
          "application/json": components["schemas"]["CompanyCustomerExtendedModel"][];
          "text/json": components["schemas"]["CompanyCustomerExtendedModel"][];
          "application/xml": components["schemas"]["CompanyCustomerExtendedModel"][];
          "text/xml": components["schemas"]["CompanyCustomerExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Tags for Customer
   * @description Note:
   *
   *     Posted tags will replace any existing tags for the customer.
   *     A new tag will be created if the Id for a tag is not provided.
   *
   * Sample request:
   *
   *     POST /v0.1/companies/1/customers/19870/tags
   *     [
   *         {
   *             "name": "tag-name",
   *             "id": 2
   *         },
   *         {
   *             "name": "tag-test",
   *             "id": 1
   *         },
   *     ]
   */
  EditCustomerTags: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Customer Id */
        customerId: number;
      };
    };
    /** @description CompanyTagModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyTagModel"][];
        "application/json": components["schemas"]["CompanyTagModel"][];
        "text/json": components["schemas"]["CompanyTagModel"][];
        "application/*+json": components["schemas"]["CompanyTagModel"][];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyCustomerModel"];
          "application/json": components["schemas"]["CompanyCustomerModel"];
          "text/json": components["schemas"]["CompanyCustomerModel"];
          "application/xml": components["schemas"]["CompanyCustomerModel"];
          "text/xml": components["schemas"]["CompanyCustomerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get Company Image by Id */
  CompanyImage: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Image id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyImageModel"];
          "application/json": components["schemas"]["CompanyImageModel"];
          "text/json": components["schemas"]["CompanyImageModel"];
          "application/xml": components["schemas"]["CompanyImageModel"];
          "text/xml": components["schemas"]["CompanyImageModel"];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Download Company Image */
  CompanyImageDownload: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Image id */
        id: number;
        /** @description Image File Name */
        imageFileName: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get Company Images Assigned to User */
  CompanyImages: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyImageModel"][];
          "application/json": components["schemas"]["CompanyImageModel"][];
          "text/json": components["schemas"]["CompanyImageModel"][];
          "application/xml": components["schemas"]["CompanyImageModel"][];
          "text/xml": components["schemas"]["CompanyImageModel"][];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Add Image to User */
  AddCompanyImage: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          File: string;
          SetAsPrimary?: boolean;
        };
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyImageModel"];
          "application/json": components["schemas"]["CompanyImageModel"];
          "text/json": components["schemas"]["CompanyImageModel"];
          "application/xml": components["schemas"]["CompanyImageModel"];
          "text/xml": components["schemas"]["CompanyImageModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company managers
   * @description Sample request:
   *
   *     GET /v0.1/companies/1/managers
   */
  CompanyManagers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserBaseModel"][];
          "application/json": components["schemas"]["CompanyUserBaseModel"][];
          "text/json": components["schemas"]["CompanyUserBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get profiles list
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/profiles
   *     {
   *         "createdOffsetDays": 90,
   *         "updatedOffsetDays": 30,
   *         "pageAndSortBy": {
   *             "page": 1,
   *             "itemsPerPage": 15,
   *             "order": 0,
   *             "sortBy": 1
   *         }
   *     }
   */
  CompanyProfiles: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description Company Profile Filter */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyProfileFilterModel"];
        "application/json": components["schemas"]["CompanyProfileFilterModel"];
        "text/json": components["schemas"]["CompanyProfileFilterModel"];
        "application/*+json": components["schemas"]["CompanyProfileFilterModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyProfilesModel"];
          "application/json": components["schemas"]["CompanyProfilesModel"];
          "text/json": components["schemas"]["CompanyProfilesModel"];
          "application/xml": components["schemas"]["CompanyProfilesModel"];
          "text/xml": components["schemas"]["CompanyProfilesModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Project file attachment by Id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  GetProjectAttachment: {
    parameters: {
      path: {
        id: number;
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get recruitment managers
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  RecruitmentManagers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyRecruitmentManagerModel"][];
          "application/json": components["schemas"]["CompanyRecruitmentManagerModel"][];
          "text/json": components["schemas"]["CompanyRecruitmentManagerModel"][];
          "application/xml": components["schemas"]["CompanyRecruitmentManagerModel"][];
          "text/xml": components["schemas"]["CompanyRecruitmentManagerModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get resumes list
   * @description Requires module: CompanyUserResume.
   */
  CompanyResumes: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserResumeBaseModel"][];
          "application/json": components["schemas"]["CompanyUserResumeBaseModel"][];
          "text/json": components["schemas"]["CompanyUserResumeBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserResumeBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserResumeBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Subcontractor Group by Id
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  GetCompanySubcontractorGroup: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Subcontractor Group Id */
        subcontractorGroupId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanySubcontractorGroupModel"];
          "application/json": components["schemas"]["CompanySubcontractorGroupModel"];
          "text/json": components["schemas"]["CompanySubcontractorGroupModel"];
          "application/xml": components["schemas"]["CompanySubcontractorGroupModel"];
          "text/xml": components["schemas"]["CompanySubcontractorGroupModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add subcontractor group member
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  AddCompanySubcontractorGroupMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Subcontractor Group Id */
        subcontractorGroupId: number;
      };
    };
    /** @description AddCompanySubcontractorGroupMemberModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["AddCompanySubcontractorGroupMemberModel"];
        "application/json": components["schemas"]["AddCompanySubcontractorGroupMemberModel"];
        "text/json": components["schemas"]["AddCompanySubcontractorGroupMemberModel"];
        "application/*+json": components["schemas"]["AddCompanySubcontractorGroupMemberModel"];
      };
    };
    responses: {
      /** @description All went well */
      204: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete subcontractor group member
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  DeleteCompanySubcontractorGroupMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Subcontractor Group Id */
        subcontractorGroupId: number;
        /** @description Subcontractor Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      204: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Subcontractor Groups by Company Id
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  GetCompanySubcontractorGroups: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanySubcontractorGroupModel"][];
          "application/json": components["schemas"]["CompanySubcontractorGroupModel"][];
          "text/json": components["schemas"]["CompanySubcontractorGroupModel"][];
          "application/xml": components["schemas"]["CompanySubcontractorGroupModel"][];
          "text/xml": components["schemas"]["CompanySubcontractorGroupModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company tag by Id
   * @description Sample request:
   *
   *     GET /v0.1/companies/1/tags/1
   */
  CompanyTag: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Tag Id */
        id: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyTagModel"];
          "application/json": components["schemas"]["CompanyTagModel"];
          "text/json": components["schemas"]["CompanyTagModel"];
          "application/xml": components["schemas"]["CompanyTagModel"];
          "text/xml": components["schemas"]["CompanyTagModel"];
        };
      };
      /** @description All went well */
      201: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company tags
   * @description Sample request:
   *
   *     GET /v0.1/companies/1/tags
   */
  CompanyTags: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyTagBaseModel"][];
          "application/json": components["schemas"]["CompanyTagBaseModel"][];
          "text/json": components["schemas"]["CompanyTagBaseModel"][];
          "application/xml": components["schemas"]["CompanyTagBaseModel"][];
          "text/xml": components["schemas"]["CompanyTagBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get team by id */
  Team: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Event Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamModel"];
          "application/json": components["schemas"]["TeamModel"];
          "text/json": components["schemas"]["TeamModel"];
          "application/xml": components["schemas"]["TeamModel"];
          "text/xml": components["schemas"]["TeamModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update team
   * @description Requires access level: CompanyAdmin.
   */
  UpdateTeam: {
    parameters: {
      path: {
        /** @description Team Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description TeamAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamAddEditModel"];
        "application/json": components["schemas"]["TeamAddEditModel"];
        "text/json": components["schemas"]["TeamAddEditModel"];
        "application/*+json": components["schemas"]["TeamAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamModel"];
          "application/json": components["schemas"]["TeamModel"];
          "text/json": components["schemas"]["TeamModel"];
          "application/xml": components["schemas"]["TeamModel"];
          "text/xml": components["schemas"]["TeamModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get teams list */
  CompanyTeams: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamBaseModel"][];
          "application/json": components["schemas"]["TeamBaseModel"][];
          "text/json": components["schemas"]["TeamBaseModel"][];
          "application/xml": components["schemas"]["TeamBaseModel"][];
          "text/xml": components["schemas"]["TeamBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add team
   * @description Requires access level: CompanyAdmin.
   */
  NewTeam: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description TeamAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamAddEditModel"];
        "application/json": components["schemas"]["TeamAddEditModel"];
        "text/json": components["schemas"]["TeamAddEditModel"];
        "application/*+json": components["schemas"]["TeamAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["TeamModel"];
          "application/json": components["schemas"]["TeamModel"];
          "text/json": components["schemas"]["TeamModel"];
          "application/xml": components["schemas"]["TeamModel"];
          "text/xml": components["schemas"]["TeamModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get team managers */
  TeamManagers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add team manager
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/teams/1234/managers
   *     {
   *         "teamId" : 1234,
   *         "companyUserId" : 54632
   *     }
   */
  AddTeamManager: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        teamId: string;
      };
    };
    /** @description TeamMemberEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamManagerEditModel"];
        "application/json": components["schemas"]["TeamManagerEditModel"];
        "text/json": components["schemas"]["TeamManagerEditModel"];
        "application/*+json": components["schemas"]["TeamManagerEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamManagerModel"][];
          "application/json": components["schemas"]["TeamManagerModel"][];
          "text/json": components["schemas"]["TeamManagerModel"][];
          "application/xml": components["schemas"]["TeamManagerModel"][];
          "text/xml": components["schemas"]["TeamManagerModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Remove team manager
   * @description Sample request:
   *
   *     DELETE /v0.1/companies/1/teams/1234/managers/54632
   */
  RemoveTeamManager: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get team member */
  GetTeamMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamMemberModel"];
          "application/json": components["schemas"]["TeamMemberModel"];
          "text/json": components["schemas"]["TeamMemberModel"];
          "application/xml": components["schemas"]["TeamMemberModel"];
          "text/xml": components["schemas"]["TeamMemberModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update team member
   * @description Requires access level: CompanyAdmin.
   */
  UpdateTeamMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User id */
        id: number;
      };
    };
    /** @description TeamMemberEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamMemberEditModel"];
        "application/json": components["schemas"]["TeamMemberEditModel"];
        "text/json": components["schemas"]["TeamMemberEditModel"];
        "application/*+json": components["schemas"]["TeamMemberEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamMemberModel"];
          "application/json": components["schemas"]["TeamMemberModel"];
          "text/json": components["schemas"]["TeamMemberModel"];
          "application/xml": components["schemas"]["TeamMemberModel"];
          "text/xml": components["schemas"]["TeamMemberModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Remove team member
   * @description Requires access level: CompanyAdmin.
   */
  RemoveTeamMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get team members */
  GetTeamMembers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamMemberModel"][];
          "application/json": components["schemas"]["TeamMemberModel"][];
          "text/json": components["schemas"]["TeamMemberModel"][];
          "application/xml": components["schemas"]["TeamMemberModel"][];
          "text/xml": components["schemas"]["TeamMemberModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add team member
   * @description Requires access level: CompanyAdmin.
   */
  AddTeamMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
      };
    };
    /** @description TeamMemberAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamMemberAddModel"];
        "application/json": components["schemas"]["TeamMemberAddModel"];
        "text/json": components["schemas"]["TeamMemberAddModel"];
        "application/*+json": components["schemas"]["TeamMemberAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["TeamMemberModel"];
          "application/json": components["schemas"]["TeamMemberModel"];
          "text/json": components["schemas"]["TeamMemberModel"];
          "application/xml": components["schemas"]["TeamMemberModel"];
          "text/xml": components["schemas"]["TeamMemberModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Move team member and associated bookings to another team
   * @description Requires access level: CompanyAdmin.
   */
  MoveTeamMember: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User id */
        id: number;
      };
    };
    /** @description TeamMemberMoveModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamMemberMoveModel"];
        "application/json": components["schemas"]["TeamMemberMoveModel"];
        "text/json": components["schemas"]["TeamMemberMoveModel"];
        "application/*+json": components["schemas"]["TeamMemberMoveModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description No Content */
      204: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get team members
   * @deprecated
   */
  GetTeamUsers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add team member
   * @deprecated
   * @description Requires access level: CompanyAdmin.
   */
  AddTeamUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
      };
    };
    /** @description TeamMemberAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TeamMemberAddModel"];
        "application/json": components["schemas"]["TeamMemberAddModel"];
        "text/json": components["schemas"]["TeamMemberAddModel"];
        "application/*+json": components["schemas"]["TeamMemberAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamMemberModel"][];
          "application/json": components["schemas"]["TeamMemberModel"][];
          "text/json": components["schemas"]["TeamMemberModel"][];
          "application/xml": components["schemas"]["TeamMemberModel"][];
          "text/xml": components["schemas"]["TeamMemberModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Remove team member
   * @deprecated
   * @description Requires access level: CompanyAdmin.
   */
  RemoveTeamUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Team Id */
        teamId: number;
        /** @description User Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company user by id */
  User: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserModel"];
          "application/json": components["schemas"]["CompanyUserModel"];
          "text/json": components["schemas"]["CompanyUserModel"];
          "application/xml": components["schemas"]["CompanyUserModel"];
          "text/xml": components["schemas"]["CompanyUserModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update company user
   * @description Requires access level: CompanyAdmin.
   */
  UpdateCompanyUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    /** @description CompanyUserEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEditModel"];
        "application/json": components["schemas"]["CompanyUserEditModel"];
        "text/json": components["schemas"]["CompanyUserEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserFullModel"];
          "application/json": components["schemas"]["CompanyUserFullModel"];
          "text/json": components["schemas"]["CompanyUserFullModel"];
          "application/xml": components["schemas"]["CompanyUserFullModel"];
          "text/xml": components["schemas"]["CompanyUserFullModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete user from the system
   * Firstly, the user has to be disconnected, which can be done through a PATCH or PUT
   * This action is irreversible, use with caution
   * @description Requires access level: CompanyAdmin.
   */
  DeleteCompanyUser: {
    parameters: {
      query: {
        /** @description CompanyUser FirstName */
        firstName?: string;
        /** @description CompanyUser LastName */
        lastName?: string;
      };
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Patch company user
   * @description Requires access level: CompanyAdmin.
   */
  PatchCompanyUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    /** @description Only certain properties on the user are patchable. See the generated example for a list of available properties, using the `op: "replace"` as example. See the generated schema for `ICompanyUserEmployeePatchDocument` for full type information per property */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "value": 0,
         *     "path": "/status",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "2023-05-02T12:20:46.4336927+02:00",
         *     "path": "/employmentstartdate",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "2023-05-02T12:20:46.4336972+02:00",
         *     "path": "/employmentenddate",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/employmentnumber",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/invoicinggoal",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/mobility",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/availabilitypercent",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "2023-05-02T12:20:46.4337+02:00",
         *     "path": "/availablefromdate",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/title",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/email",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/taxtable",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/basesalary",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/provision",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/hourlytargetrate",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/selfcost",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/locationid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/defaultcurrencyid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/displaycurrencyid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/firstname",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/lastname",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "2023-05-02T12:20:46.4337049+02:00",
         *     "path": "/dateofbirth",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/gender",
         *     "op": "replace"
         *   },
         *   {
         *     "value": 0,
         *     "path": "/companycalendarid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/timezoneid",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/phone",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/desiredassignment",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/internalidentifier",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/twitter",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/linkedin",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/homepage",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/blog",
         *     "op": "replace"
         *   },
         *   {
         *     "value": "string",
         *     "path": "/github",
         *     "op": "replace"
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["JsonPatchDocument"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserFullModel"];
          "application/json": components["schemas"]["CompanyUserFullModel"];
          "text/json": components["schemas"]["CompanyUserFullModel"];
          "application/xml": components["schemas"]["CompanyUserFullModel"];
          "text/xml": components["schemas"]["CompanyUserFullModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company users list */
  CompanyUsers: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add company user employee
   * @description Requires access level: CompanyAdmin.
   */
  AddCompanyUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description CompanyUserAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserAddModel"];
        "application/json": components["schemas"]["CompanyUserAddModel"];
        "text/json": components["schemas"]["CompanyUserAddModel"];
        "application/*+json": components["schemas"]["CompanyUserAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserFullModel"];
          "application/json": components["schemas"]["CompanyUserFullModel"];
          "text/json": components["schemas"]["CompanyUserFullModel"];
          "application/xml": components["schemas"]["CompanyUserFullModel"];
          "text/xml": components["schemas"]["CompanyUserFullModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Convert company user employee to an AAD account
   * @description Requires access level: CompanyAdmin.
   */
  ConvertUserToAadAccount: {
    parameters: {
      path: {
        /** @description Company User Id */
        companyUserId: number;
        companyId: string;
      };
    };
    /** @description ConvertCompanyUserToAadAccountModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ConvertCompanyUserToAadAccountModel"];
        "application/json": components["schemas"]["ConvertCompanyUserToAadAccountModel"];
        "text/json": components["schemas"]["ConvertCompanyUserToAadAccountModel"];
        "application/*+json": components["schemas"]["ConvertCompanyUserToAadAccountModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee event
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEvent: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventModel"];
          "application/json": components["schemas"]["CompanyUserEventModel"];
          "text/json": components["schemas"]["CompanyUserEventModel"];
          "application/xml": components["schemas"]["CompanyUserEventModel"];
          "text/xml": components["schemas"]["CompanyUserEventModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee meeting event
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates employee meeting event
   * @description Requires access level: CompanyManager.
   */
  UpdateCompanyUserEmployeeEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Meeting event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: CompanyManager.
   */
  DeleteCompanyUserEmployeeEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee meetings events list
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventMeetingList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new employee meeting event
   * @description Requires access level: CompanyManager.
   */
  NewCompanyUserEmployeeEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Meeting event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee note event
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates employee note event
   * @description Requires access level: CompanyManager.
   */
  UpdateCompanyUserEmployeeEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Note event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: CompanyManager.
   */
  DeleteCompanyUserEmployeeEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee notes events list
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventNoteList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new employee note event
   * @description Requires access level: CompanyManager.
   */
  NewCompanyUserEmployeeEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Note event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee events list
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEvents: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee tasks events list
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventTaskList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new employee task event
   * @description Requires access level: CompanyManager.
   */
  NewCompanyUserEmployeeEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Task event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get employee task event
   * @description Requires access level: CompanyManager.
   */
  CompanyUserEmployeeEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates employee's task event
   * @description Requires access level: CompanyManager.
   */
  UpdateCompanyUserEmployeeEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Task event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: CompanyManager.
   */
  DeleteCompanyUserEmployeeEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company user, including financial fields, by id
   * @description Requires access level: CompanyAdmin.
   */
  UserFull: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserFullModel"];
          "application/json": components["schemas"]["CompanyUserFullModel"];
          "text/json": components["schemas"]["CompanyUserFullModel"];
          "application/xml": components["schemas"]["CompanyUserFullModel"];
          "text/xml": components["schemas"]["CompanyUserFullModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Permissions for Company User
   * @description Requires access level: CompanyAdmin.
   */
  UpdatePermissions: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserPermissionsEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserPermissionsEditModel"];
        "application/json": components["schemas"]["CompanyUserPermissionsEditModel"];
        "text/json": components["schemas"]["CompanyUserPermissionsEditModel"];
        "application/*+json": components["schemas"]["CompanyUserPermissionsEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["RoleModel"][];
          "application/json": components["schemas"]["RoleModel"][];
          "text/json": components["schemas"]["RoleModel"][];
          "application/xml": components["schemas"]["RoleModel"][];
          "text/xml": components["schemas"]["RoleModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile by company user id */
  CompanyUserProfile: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileFullModel"];
          "application/json": components["schemas"]["CompanyUserProfileFullModel"];
          "text/json": components["schemas"]["CompanyUserProfileFullModel"];
          "application/xml": components["schemas"]["CompanyUserProfileFullModel"];
          "text/xml": components["schemas"]["CompanyUserProfileFullModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Profile for user */
  NewCompanyUserProfile: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileCommitmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileBaseModel"];
          "application/json": components["schemas"]["CompanyUserProfileBaseModel"];
          "text/json": components["schemas"]["CompanyUserProfileBaseModel"];
          "application/xml": components["schemas"]["CompanyUserProfileBaseModel"];
          "text/xml": components["schemas"]["CompanyUserProfileBaseModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile commitment by id */
  CompanyUserProfileCommitment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileCommitment Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Commitment */
  UpdateCompanyUserProfileCommitment: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileCommitmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Commitment */
  DeleteCompanyUserProfileCommitment: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Profile Commitment */
  NewCompanyUserProfileCommitment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileCommitmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileCommitmentAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/json": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "application/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
          "text/xml": components["schemas"]["CompanyUserProfileCommitmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile education by id */
  CompanyUserProfileEducation: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileEducation Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEducationModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Education */
  UpdateCompanyUserProfileEducation: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileEducationAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEducationModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Education */
  DeleteCompanyUserProfileEducation: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Profile Education */
  NewCompanyUserProfileEducation: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileEducationAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileEducationAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/json": components["schemas"]["CompanyUserProfileEducationModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEducationModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEducationModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile employer by id */
  CompanyUserProfileEmployer: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileEmployer Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Employer */
  UpdateCompanyUserProfileEmployer: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileEmployerAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Employer */
  DeleteCompanyUserProfileEmployer: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Employer profile item */
  NewCompanyUserProfileEmployer: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileEmployerAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileEmployerAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/json": components["schemas"]["CompanyUserProfileEmployerModel"];
          "application/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
          "text/xml": components["schemas"]["CompanyUserProfileEmployerModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile external skill by id */
  CompanyUserProfileExtSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileExtSkill Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Extra Skill Profile Item */
  UpdateCompanyUserProfileExtSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileExtraSkillAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Extra Skill Profile Item */
  DeleteCompanyUserProfileExtSkill: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Extra Skill Profile Item */
  NewCompanyUserProfileExtSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileExtSkillAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileExtSkillAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileExtSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile language by id */
  CompanyUserProfileLanguage: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileLanguage Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Language Profile Item */
  UpdateCompanyUserProfileLanguage: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileExtraSkillAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Language Profile Item */
  DeleteCompanyUserProfileLanguage: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Language Profile Item */
  NewCompanyUserProfileLanguage: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileLanguageAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileLanguageAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/json": components["schemas"]["CompanyUserProfileLanguageModel"];
          "application/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
          "text/xml": components["schemas"]["CompanyUserProfileLanguageModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get Available Profile Languages */
  ProfileLanguages: {
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProfileLanguageModel"][];
          "application/json": components["schemas"]["ProfileLanguageModel"][];
          "text/json": components["schemas"]["ProfileLanguageModel"][];
          "application/xml": components["schemas"]["ProfileLanguageModel"][];
          "text/xml": components["schemas"]["ProfileLanguageModel"][];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile presentation */
  CompanyUserProfilePresentation: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfilePresentationModel"];
          "application/json": components["schemas"]["CompanyUserProfilePresentationModel"];
          "text/json": components["schemas"]["CompanyUserProfilePresentationModel"];
          "application/xml": components["schemas"]["CompanyUserProfilePresentationModel"];
          "text/xml": components["schemas"]["CompanyUserProfilePresentationModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Edit Profile Presentation */
  UpdateCompanyUserProfilePresentation: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfilePresentationEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfilePresentationEditModel"];
        "application/json": components["schemas"]["CompanyUserProfilePresentationEditModel"];
        "text/json": components["schemas"]["CompanyUserProfilePresentationEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfilePresentationEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfilePresentationModel"];
          "application/json": components["schemas"]["CompanyUserProfilePresentationModel"];
          "text/json": components["schemas"]["CompanyUserProfilePresentationModel"];
          "application/xml": components["schemas"]["CompanyUserProfilePresentationModel"];
          "text/xml": components["schemas"]["CompanyUserProfilePresentationModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile reference by id */
  CompanyUserProfileReference: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileReference Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Reference Item */
  UpdateCompanyUserProfileReference: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileReferenceAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Reference Item */
  DeleteCompanyUserProfileReference: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Profile Reference Item */
  NewCompanyUserProfileReference: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileReferenceAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileReferenceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/json": components["schemas"]["CompanyUserProfileReferenceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileReferenceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profiles list */
  CompanyUserProfiles: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileBaseModel"][];
          "application/json": components["schemas"]["CompanyUserProfileBaseModel"][];
          "text/json": components["schemas"]["CompanyUserProfileBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserProfileBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserProfileBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile skill by id */
  CompanyUserProfileSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileSkill Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Skill */
  UpdateCompanyUserProfileSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileSkillEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileSkillEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileSkillEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileSkillEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileSkillEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Skill */
  DeleteCompanyUserProfileSkill: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Add Skill to profile */
  NewCompanyUserProfileSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileSkillAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileSkillAddModel"];
        "application/json": components["schemas"]["CompanyUserProfileSkillAddModel"];
        "text/json": components["schemas"]["CompanyUserProfileSkillAddModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileSkillAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/json": components["schemas"]["CompanyUserProfileSkillModel"];
          "application/xml": components["schemas"]["CompanyUserProfileSkillModel"];
          "text/xml": components["schemas"]["CompanyUserProfileSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile training by id */
  CompanyUserProfileTraining: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileTraining Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Training Item */
  UpdateCompanyUserProfileTraining: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileTrainingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Training Item */
  DeleteCompanyUserProfileTraining: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create Profile Training Item */
  NewCompanyUserProfileTraining: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserProfileTrainingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileTrainingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/json": components["schemas"]["CompanyUserProfileTrainingModel"];
          "application/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
          "text/xml": components["schemas"]["CompanyUserProfileTrainingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get profile work experience by id */
  CompanyUserProfileWorkExperience: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description ProfileWorkExperience Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update Profile Work Experience */
  UpdateCompanyUserProfileWorkExperience: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        id: number;
      };
    };
    /** @description CompanyUserProfileWorkExperienceAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete Profile Work Experience Item */
  DeleteCompanyUserProfileWorkExperience: {
    parameters: {
      path: {
        /** @description Profile Item Id */
        id: number;
        /** @description Company Id */
        companyId: number;
        /** @description Company User Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create WorkExperience Profile Item */
  NewCompanyUserProfileWorkExperience: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyUserWorkExperienceAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "application/json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "text/json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserProfileWorkExperienceAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/json": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "application/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
          "text/xml": components["schemas"]["CompanyUserProfileWorkExperienceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get resume by id
   * @description Requires module: CompanyUserResume.
   */
  Resume: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Resume Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ClassicCompanyUserResumeModel"];
          "application/json": components["schemas"]["ClassicCompanyUserResumeModel"];
          "text/json": components["schemas"]["ClassicCompanyUserResumeModel"];
          "application/xml": components["schemas"]["ClassicCompanyUserResumeModel"];
          "text/xml": components["schemas"]["ClassicCompanyUserResumeModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company user resumes list
   * @description Requires module: CompanyUserResume.
   */
  CompanyUserResumes: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserResumeBaseModel"][];
          "application/json": components["schemas"]["CompanyUserResumeBaseModel"][];
          "text/json": components["schemas"]["CompanyUserResumeBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserResumeBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserResumeBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Roles for CompanyUser by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  CompanyUserRoles: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserProjectAssignmentModel"];
          "application/json": components["schemas"]["CompanyUserProjectAssignmentModel"];
          "text/json": components["schemas"]["CompanyUserProjectAssignmentModel"];
          "application/xml": components["schemas"]["CompanyUserProjectAssignmentModel"];
          "text/xml": components["schemas"]["CompanyUserProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get extended company users list */
  CompanyUsersExtended: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserExtendedModel"][];
          "application/json": components["schemas"]["CompanyUserExtendedModel"][];
          "text/json": components["schemas"]["CompanyUserExtendedModel"][];
          "application/xml": components["schemas"]["CompanyUserExtendedModel"][];
          "text/xml": components["schemas"]["CompanyUserExtendedModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get skill by id */
  Skill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Skill Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSkillModel"];
          "application/json": components["schemas"]["CompanyUserSkillModel"];
          "text/json": components["schemas"]["CompanyUserSkillModel"];
          "application/xml": components["schemas"]["CompanyUserSkillModel"];
          "text/xml": components["schemas"]["CompanyUserSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get skills list */
  Skills: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSkillModel"][];
          "application/json": components["schemas"]["CompanyUserSkillModel"][];
          "text/json": components["schemas"]["CompanyUserSkillModel"][];
          "application/xml": components["schemas"]["CompanyUserSkillModel"][];
          "text/xml": components["schemas"]["CompanyUserSkillModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company user by id
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanySubcontractor: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSubcontractorModel"];
          "application/json": components["schemas"]["CompanyUserSubcontractorModel"];
          "text/json": components["schemas"]["CompanyUserSubcontractorModel"];
          "application/xml": components["schemas"]["CompanyUserSubcontractorModel"];
          "text/xml": components["schemas"]["CompanyUserSubcontractorModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete subcontractor from the system
   * This action is irreversible, use with caution
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  DeleteCompanySubcontractor: {
    parameters: {
      query: {
        /** @description Subcontractor FirstName */
        firstName?: string;
        /** @description Subcontractor LastName */
        lastName?: string;
      };
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Subcontractor Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractors: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSubcontractorBaseModel"][];
          "application/json": components["schemas"]["CompanyUserSubcontractorBaseModel"][];
          "text/json": components["schemas"]["CompanyUserSubcontractorBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserSubcontractorBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserSubcontractorBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add subcontractor
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  AddCompanyUserSubcontractor: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description CompanyUserSubcontractorAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserSubcontractorAddEditModel"];
        "application/json": components["schemas"]["CompanyUserSubcontractorAddEditModel"];
        "text/json": components["schemas"]["CompanyUserSubcontractorAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserSubcontractorAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSubcontractorModel"];
          "application/json": components["schemas"]["CompanyUserSubcontractorModel"];
          "text/json": components["schemas"]["CompanyUserSubcontractorModel"];
          "application/xml": components["schemas"]["CompanyUserSubcontractorModel"];
          "text/xml": components["schemas"]["CompanyUserSubcontractorModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEvent: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventModel"];
          "application/json": components["schemas"]["CompanyUserEventModel"];
          "text/json": components["schemas"]["CompanyUserEventModel"];
          "application/xml": components["schemas"]["CompanyUserEventModel"];
          "text/xml": components["schemas"]["CompanyUserEventModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractor meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Meeting event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates subcontractor meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  UpdateCompanyUserSubcontractorEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Meeting event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  DeleteCompanyUserSubcontractorEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors meetings events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventMeetingList: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new subcontractor meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  NewCompanyUserSubcontractorEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Meeting event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/json": components["schemas"]["CompanyUserEventMeetingModel"];
          "application/xml": components["schemas"]["CompanyUserEventMeetingModel"];
          "text/xml": components["schemas"]["CompanyUserEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors notes events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates subcontractor note event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  UpdateCompanyUserSubcontractorEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Note event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  DeleteCompanyUserSubcontractorEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors notes events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventsNotes: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new subcontractors note event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  NewCompanyUserSubcontractorEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Note event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventNoteModel"];
          "application/json": components["schemas"]["CompanyUserEventNoteModel"];
          "text/json": components["schemas"]["CompanyUserEventNoteModel"];
          "application/xml": components["schemas"]["CompanyUserEventNoteModel"];
          "text/xml": components["schemas"]["CompanyUserEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEvents: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        subcontractorId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors tasks events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventsTasks: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/json": components["schemas"]["CompanyUserEventBaseModel"][];
          "application/xml": components["schemas"]["CompanyUserEventBaseModel"][];
          "text/xml": components["schemas"]["CompanyUserEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Creates new subcontractor task event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  NewCompanyUserSubcontractorEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description Task event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractors tasks events list
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  CompanyUserSubcontractorEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Updates subcontractor task event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  UpdateCompanyUserSubcontractorEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    /** @description Task event details */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "text/json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["CompanyUserEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserEventTaskModel"];
          "application/json": components["schemas"]["CompanyUserEventTaskModel"];
          "text/json": components["schemas"]["CompanyUserEventTaskModel"];
          "application/xml": components["schemas"]["CompanyUserEventTaskModel"];
          "text/xml": components["schemas"]["CompanyUserEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Deletes meeting event
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  DeleteCompanyUserSubcontractorEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Event id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get subcontractor File Attachment by Id
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  GetSubcontractorAttachment: {
    parameters: {
      path: {
        id: number;
        companyId: number;
        attachmentId: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Upload subcontractor file attachment
   * @description Requires access level: PartnerManager. Requires module: Partners.
   */
  SubcontractorAttachment: {
    parameters: {
      path: {
        /** @description Candidate Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          Files: string[];
          Title: string;
          Description?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["CompanyUserSubcontractorFileAttachmentListModel"];
          "application/json": components["schemas"]["CompanyUserSubcontractorFileAttachmentListModel"];
          "text/json": components["schemas"]["CompanyUserSubcontractorFileAttachmentListModel"];
          "application/xml": components["schemas"]["CompanyUserSubcontractorFileAttachmentListModel"];
          "text/xml": components["schemas"]["CompanyUserSubcontractorFileAttachmentListModel"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Tags for User
   * @description Note:
   *
   *     Posted tags will replace any existing tags for the user.
   *     A new tag will be created if the id for a tag is not provided.
   *
   * Sample request:
   *
   *     POST /v0.1/companies/1/users/19870/tags
   *     [
   *         {
   *             "name": "tag-name",
   *             "id": 2
   *         },
   *         {
   *             "name": "tag-new",
   *         },
   *     ]
   */
  EditCompanyUserTags: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    /** @description CompanyTagModel[] */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyTagModel"][];
        "application/json": components["schemas"]["CompanyTagModel"][];
        "text/json": components["schemas"]["CompanyTagModel"][];
        "application/*+json": components["schemas"]["CompanyTagModel"][];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CompanyUserModel"];
          "application/json": components["schemas"]["CompanyUserModel"];
          "text/json": components["schemas"]["CompanyUserModel"];
          "application/xml": components["schemas"]["CompanyUserModel"];
          "text/xml": components["schemas"]["CompanyUserModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get teams for team member */
  UserTeams: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["TeamBaseModel"][];
          "application/json": components["schemas"]["TeamBaseModel"][];
          "text/json": components["schemas"]["TeamBaseModel"][];
          "application/xml": components["schemas"]["TeamBaseModel"][];
          "text/xml": components["schemas"]["TeamBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company webhooks
   * @description Sample request:
   *
   *     GET /v0.1/companies/1/webhooks
   */
  CompanyWebhooks: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["WebhookModel"][];
          "application/json": components["schemas"]["WebhookModel"][];
          "text/json": components["schemas"]["WebhookModel"][];
          "application/xml": components["schemas"]["WebhookModel"][];
          "text/xml": components["schemas"]["WebhookModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Webhook
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/webhooks
   *     {
   *         "isActive": false,
   *         "endpointUrl": "https://webhook.site/7a619ffb-e67c-41fc-8113-083d6013f76c",
   *         "configurations": [
   *             {
   *                 "entityType": 1,
   *                 "actionType": 1
   *             }
   *         ],
   *         "credentials": [
   *             {
   *                 "isBasicAuthentication": true,
   *                 "headerName": "user",
   *                 "headerValue": "somevalue"
   *             }
   *         ]
   *     }
   */
  NewWebhook: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description WebhookAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["WebhookAddModel"];
        "application/json": components["schemas"]["WebhookAddModel"];
        "text/json": components["schemas"]["WebhookAddModel"];
        "application/*+json": components["schemas"]["WebhookAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["WebhookModel"];
          "application/json": components["schemas"]["WebhookModel"];
          "text/json": components["schemas"]["WebhookModel"];
          "application/xml": components["schemas"]["WebhookModel"];
          "text/xml": components["schemas"]["WebhookModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** @description Requires access level: CompanyAdmin. Requires module: Webhooks. */
  InstallWebhookManifest: {
    parameters: {
      path: {
        companyId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["WebhookAddModel"][];
        "application/json": components["schemas"]["WebhookAddModel"][];
        "text/json": components["schemas"]["WebhookAddModel"][];
        "application/*+json": components["schemas"]["WebhookAddModel"][];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "text/plain": components["schemas"]["WebhookModel"][];
          "application/json": components["schemas"]["WebhookModel"][];
          "text/json": components["schemas"]["WebhookModel"][];
          "application/xml": components["schemas"]["WebhookModel"][];
          "text/xml": components["schemas"]["WebhookModel"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Remove webhook
   * @description Sample request:
   *
   *     DELETE /v0.1/companies/1/webhooks/42a3a220-766c-eb11-8e13-000c29b4e92f
   */
  RemoveWebhook: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Webhook Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden */
      403: never;
      /** @description Not Found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get resume by id
   * @description Requires module: CompanyUserResume.
   */
  DynamicResume: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description CompanyUser Id */
        companyUserId: number;
        /** @description Resume Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["DynamicCompanyUserResumeModel"];
          "application/json": components["schemas"]["DynamicCompanyUserResumeModel"];
          "text/json": components["schemas"]["DynamicCompanyUserResumeModel"];
          "application/xml": components["schemas"]["DynamicCompanyUserResumeModel"];
          "text/xml": components["schemas"]["DynamicCompanyUserResumeModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Search keywords by term */
  SearchKeyword: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Search term */
        term: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["KeywordModel"][];
          "application/json": components["schemas"]["KeywordModel"][];
          "text/json": components["schemas"]["KeywordModel"][];
          "application/xml": components["schemas"]["KeywordModel"][];
          "text/xml": components["schemas"]["KeywordModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Translates any mention-ids in a text to their human readable form.
   * Translations are access restricted, if you don't have enough access
   * to get the name of an id, it won't be translated.
   */
  TranslateMentions: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description The model with one property, value, which contains the text containing the mentions you're looking to translate.  Example of a text with a mention inside: `"Hello @(1|123456) can you please consider this role?"` */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["MentionTextModel"];
        "application/json": components["schemas"]["MentionTextModel"];
        "text/json": components["schemas"]["MentionTextModel"];
        "application/*+json": components["schemas"]["MentionTextModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
          "text/json": string;
          "application/xml": string;
          "text/xml": string;
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Partners by filter
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  SearchPartners: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description Filter options */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["PartnersFilterModel"];
        "application/json": components["schemas"]["PartnersFilterModel"];
        "text/json": components["schemas"]["PartnersFilterModel"];
        "application/*+json": components["schemas"]["PartnersFilterModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["PartnersOverviewModel"];
          "application/json": components["schemas"]["PartnersOverviewModel"];
          "text/json": components["schemas"]["PartnersOverviewModel"];
          "application/xml": components["schemas"]["PartnersOverviewModel"];
          "text/xml": components["schemas"]["PartnersOverviewModel"];
        };
      };
      /** @description Incorrect request */
      400: never;
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  Project: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectModel"];
          "application/json": components["schemas"]["ProjectModel"];
          "text/json": components["schemas"]["ProjectModel"];
          "application/xml": components["schemas"]["ProjectModel"];
          "text/xml": components["schemas"]["ProjectModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update project
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateCompanyProject: {
    parameters: {
      path: {
        /** @description Project Id */
        id: number;
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description ProjectAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAddEditModel"];
        "application/json": components["schemas"]["ProjectAddEditModel"];
        "text/json": components["schemas"]["ProjectAddEditModel"];
        "application/*+json": components["schemas"]["ProjectAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectModel"];
          "application/json": components["schemas"]["ProjectModel"];
          "text/json": components["schemas"]["ProjectModel"];
          "application/xml": components["schemas"]["ProjectModel"];
          "text/xml": components["schemas"]["ProjectModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete project
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteCompanyProject: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get projects list  - please note this endpoint currently only returns projects with the status WON. Please use the SearchProjects endpoint for more options of filtering desired Projects
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  Projects: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectBaseModel"][];
          "application/json": components["schemas"]["ProjectBaseModel"][];
          "text/json": components["schemas"]["ProjectBaseModel"][];
          "application/xml": components["schemas"]["ProjectBaseModel"][];
          "text/xml": components["schemas"]["ProjectBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add project
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  NewCompanyProject: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description ProjectAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAddEditModel"];
        "application/json": components["schemas"]["ProjectAddEditModel"];
        "text/json": components["schemas"]["ProjectAddEditModel"];
        "application/*+json": components["schemas"]["ProjectAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectModel"];
          "application/json": components["schemas"]["ProjectModel"];
          "text/json": components["schemas"]["ProjectModel"];
          "application/xml": components["schemas"]["ProjectModel"];
          "text/xml": components["schemas"]["ProjectModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get projectassignment by id (Obsolete)
   * @deprecated
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  OldProjectAssignment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description ProjectAssignment Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Role by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectAssignment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description ProjectAssignment Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Role
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectAssignment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description ProjectAssignment Id */
        id: number;
      };
    };
    /** @description ProjectAssignmentEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentEditModel"];
        "application/json": components["schemas"]["ProjectAssignmentEditModel"];
        "text/json": components["schemas"]["ProjectAssignmentEditModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Role
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectAssignment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description ProjectAssignment Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Role
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  NewProjectAssignment: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    /** @description ProjectAssignmentAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentAddModel"];
        "application/json": components["schemas"]["ProjectAssignmentAddModel"];
        "text/json": components["schemas"]["ProjectAssignmentAddModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Announce a role (ProjectAssignment) to the Partner Network and optionally also to Cinode Market(https://cinode.market/requests).
   * If you are testing, set the "PublishForReal" to "false", otherwise you will publish this announcement for real. When you're testing ("PublishForReal = false) RequestId will be 0 in the response.
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  AnnounceProjectAssignment: {
    parameters: {
      path: {
        /** @description Project Id */
        projectId: number;
        /** @description ProjectAssignment Id */
        projectAssignmentId: number;
        companyId: string;
      };
    };
    /** @description ProjectAssignmentAnnounceModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentAnnounceModel"];
        "application/json": components["schemas"]["ProjectAssignmentAnnounceModel"];
        "text/json": components["schemas"]["ProjectAssignmentAnnounceModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentAnnounceModel"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentAnnouncementBaseModel"];
          "application/json": components["schemas"]["ProjectAssignmentAnnouncementBaseModel"];
          "text/json": components["schemas"]["ProjectAssignmentAnnouncementBaseModel"];
          "application/xml": components["schemas"]["ProjectAssignmentAnnouncementBaseModel"];
          "text/xml": components["schemas"]["ProjectAssignmentAnnouncementBaseModel"];
        };
      };
      /** @description All went well */
      201: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Role Member Employee
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  AddProjectAssignmentMemberEmployee: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
      };
    };
    /** @description ProjectAssignmentMemberEmployeeAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentMemberEmployeeAddModel"];
        "application/json": components["schemas"]["ProjectAssignmentMemberEmployeeAddModel"];
        "text/json": components["schemas"]["ProjectAssignmentMemberEmployeeAddModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentMemberEmployeeAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Role Member Subcontractor
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  AddProjectAssignmentMemberSubcontractor: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
      };
    };
    /** @description ProjectAssignmentMemberSubcontractorAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentMemberSubcontractorAddModel"];
        "application/json": components["schemas"]["ProjectAssignmentMemberSubcontractorAddModel"];
        "text/json": components["schemas"]["ProjectAssignmentMemberSubcontractorAddModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentMemberSubcontractorAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Role Member Employee
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectAssignmentMemberEmployee: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
        /** @description Role Member Id */
        id: number;
      };
    };
    /** @description ProjectAssignmentMemberSubcontractorAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentMemberEmployeeEditModel"];
        "application/json": components["schemas"]["ProjectAssignmentMemberEmployeeEditModel"];
        "text/json": components["schemas"]["ProjectAssignmentMemberEmployeeEditModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentMemberEmployeeEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Role Member Subcontractor
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectAssignmentMemberSubcontractor: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
        /** @description Role Member Id */
        id: number;
      };
    };
    /** @description ProjectAssignmentMemberSubcontractorAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentMemberSubcontractorEditModel"];
        "application/json": components["schemas"]["ProjectAssignmentMemberSubcontractorEditModel"];
        "text/json": components["schemas"]["ProjectAssignmentMemberSubcontractorEditModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentMemberSubcontractorEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Role Member
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectAssignmentMemberEmployee: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
        /** @description Role Member Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentModel"];
          "application/json": components["schemas"]["ProjectAssignmentModel"];
          "text/json": components["schemas"]["ProjectAssignmentModel"];
          "application/xml": components["schemas"]["ProjectAssignmentModel"];
          "text/xml": components["schemas"]["ProjectAssignmentModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get Roles by Filter
   * Rate limited, restricted to once per minute, max 1000 requests per day
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  SearchRoles: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description Filter options */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentFilterModel"];
        "application/json": components["schemas"]["ProjectAssignmentFilterModel"];
        "text/json": components["schemas"]["ProjectAssignmentFilterModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentFilterModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentWithStatusModel"];
          "application/json": components["schemas"]["ProjectAssignmentWithStatusModel"];
          "text/json": components["schemas"]["ProjectAssignmentWithStatusModel"];
          "application/xml": components["schemas"]["ProjectAssignmentWithStatusModel"];
          "text/xml": components["schemas"]["ProjectAssignmentWithStatusModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add Role Skill
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  AddProjectAssignmentSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
      };
    };
    /** @description ProjectAssignmentMemberSkillAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentSkillAddModel"];
        "application/json": components["schemas"]["ProjectAssignmentSkillAddModel"];
        "text/json": components["schemas"]["ProjectAssignmentSkillAddModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentSkillAddModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/xml": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/xml": components["schemas"]["ProjectAssignmentSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update Role Skill
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectAssignmentSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
        /** @description Keyword Id */
        id: number;
      };
    };
    /** @description ProjectAssignmentMemberSkillAddModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectAssignmentSkillEditModel"];
        "application/json": components["schemas"]["ProjectAssignmentSkillEditModel"];
        "text/json": components["schemas"]["ProjectAssignmentSkillEditModel"];
        "application/*+json": components["schemas"]["ProjectAssignmentSkillEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/xml": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/xml": components["schemas"]["ProjectAssignmentSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete Role Skill
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectAssignmentSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Role Id */
        roleId: number;
        /** @description Keyword Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/json": components["schemas"]["ProjectAssignmentSkillModel"];
          "application/xml": components["schemas"]["ProjectAssignmentSkillModel"];
          "text/xml": components["schemas"]["ProjectAssignmentSkillModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEvent: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventModel"];
          "application/json": components["schemas"]["ProjectEventModel"];
          "text/json": components["schemas"]["ProjectEventModel"];
          "application/xml": components["schemas"]["ProjectEventModel"];
          "text/xml": components["schemas"]["ProjectEventModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project events list
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEvents: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventBaseModel"][];
          "application/json": components["schemas"]["ProjectEventBaseModel"][];
          "text/json": components["schemas"]["ProjectEventBaseModel"][];
          "application/xml": components["schemas"]["ProjectEventBaseModel"][];
          "text/xml": components["schemas"]["ProjectEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event meeting by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventMeetingModel"];
          "application/json": components["schemas"]["ProjectEventMeetingModel"];
          "text/json": components["schemas"]["ProjectEventMeetingModel"];
          "application/xml": components["schemas"]["ProjectEventMeetingModel"];
          "text/xml": components["schemas"]["ProjectEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update project event meeting
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description ProjectEventMeetingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "application/json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "text/json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventMeetingModel"];
          "application/json": components["schemas"]["ProjectEventMeetingModel"];
          "text/json": components["schemas"]["ProjectEventMeetingModel"];
          "application/xml": components["schemas"]["ProjectEventMeetingModel"];
          "text/xml": components["schemas"]["ProjectEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete project event meeting
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project events meetings list
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventMeetings: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventBaseModel"][];
          "application/json": components["schemas"]["ProjectEventBaseModel"][];
          "text/json": components["schemas"]["ProjectEventBaseModel"][];
          "application/xml": components["schemas"]["ProjectEventBaseModel"][];
          "text/xml": components["schemas"]["ProjectEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add project event meeting
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  NewProjectMeeting: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    /** @description ProjectEventMeetingAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "application/json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "text/json": components["schemas"]["ProjectEventMeetingAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventMeetingAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectEventMeetingModel"];
          "application/json": components["schemas"]["ProjectEventMeetingModel"];
          "text/json": components["schemas"]["ProjectEventMeetingModel"];
          "application/xml": components["schemas"]["ProjectEventMeetingModel"];
          "text/xml": components["schemas"]["ProjectEventMeetingModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event note by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["CustomerEventNoteModel"];
          "application/json": components["schemas"]["CustomerEventNoteModel"];
          "text/json": components["schemas"]["CustomerEventNoteModel"];
          "application/xml": components["schemas"]["CustomerEventNoteModel"];
          "text/xml": components["schemas"]["CustomerEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update project event note
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description ProjectEventNoteAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "application/json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "text/json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventNoteModel"];
          "application/json": components["schemas"]["ProjectEventNoteModel"];
          "text/json": components["schemas"]["ProjectEventNoteModel"];
          "application/xml": components["schemas"]["ProjectEventNoteModel"];
          "text/xml": components["schemas"]["ProjectEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete project event note
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event notes list
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventNotes: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventBaseModel"][];
          "application/json": components["schemas"]["ProjectEventBaseModel"][];
          "text/json": components["schemas"]["ProjectEventBaseModel"][];
          "application/xml": components["schemas"]["ProjectEventBaseModel"][];
          "text/xml": components["schemas"]["ProjectEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add project event note
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  NewProjectNote: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    /** @description ProjectEventNoteAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "application/json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "text/json": components["schemas"]["ProjectEventNoteAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventNoteAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectEventNoteModel"];
          "application/json": components["schemas"]["ProjectEventNoteModel"];
          "text/json": components["schemas"]["ProjectEventNoteModel"];
          "application/xml": components["schemas"]["ProjectEventNoteModel"];
          "text/xml": components["schemas"]["ProjectEventNoteModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event task by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventTaskModel"];
          "application/json": components["schemas"]["ProjectEventTaskModel"];
          "text/json": components["schemas"]["ProjectEventTaskModel"];
          "application/xml": components["schemas"]["ProjectEventTaskModel"];
          "text/xml": components["schemas"]["ProjectEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Update project event task
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  UpdateProjectTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    /** @description ProjectEventTaskAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "application/json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "text/json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventTaskModel"];
          "application/json": components["schemas"]["ProjectEventTaskModel"];
          "text/json": components["schemas"]["ProjectEventTaskModel"];
          "application/xml": components["schemas"]["ProjectEventTaskModel"];
          "text/xml": components["schemas"]["ProjectEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Delete project event task
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  DeleteProjectTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Event Id */
        id: string;
      };
    };
    responses: {
      /** @description All went well */
      200: never;
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project event tasks list
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectEventTasks: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectEventBaseModel"][];
          "application/json": components["schemas"]["ProjectEventBaseModel"][];
          "text/json": components["schemas"]["ProjectEventBaseModel"][];
          "application/xml": components["schemas"]["ProjectEventBaseModel"][];
          "text/xml": components["schemas"]["ProjectEventBaseModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Add project event task
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  NewProjectTask: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    /** @description ProjectEventTaskAddEditModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "application/json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "text/json": components["schemas"]["ProjectEventTaskAddEditModel"];
        "application/*+json": components["schemas"]["ProjectEventTaskAddEditModel"];
      };
    };
    responses: {
      /** @description All went well */
      201: {
        content: {
          "text/plain": components["schemas"]["ProjectEventTaskModel"];
          "application/json": components["schemas"]["ProjectEventTaskModel"];
          "text/json": components["schemas"]["ProjectEventTaskModel"];
          "application/xml": components["schemas"]["ProjectEventTaskModel"];
          "text/xml": components["schemas"]["ProjectEventTaskModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project pipelines
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectPipelines: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectPipelineModel"][];
          "application/json": components["schemas"]["ProjectPipelineModel"][];
          "text/json": components["schemas"]["ProjectPipelineModel"][];
          "application/xml": components["schemas"]["ProjectPipelineModel"][];
          "text/xml": components["schemas"]["ProjectPipelineModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project reference by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectReference: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
        /** @description Project reference Id */
        id: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectReferenceModel"];
          "application/json": components["schemas"]["ProjectReferenceModel"];
          "text/json": components["schemas"]["ProjectReferenceModel"];
          "application/xml": components["schemas"]["ProjectReferenceModel"];
          "text/xml": components["schemas"]["ProjectReferenceModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get project reference by id
   * @description Requires access level: CompanyManager. Requires module: Assignments.
   */
  ProjectReferences: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectReferenceModel"][];
          "application/json": components["schemas"]["ProjectReferenceModel"][];
          "text/json": components["schemas"]["ProjectReferenceModel"][];
          "application/xml": components["schemas"]["ProjectReferenceModel"][];
          "text/xml": components["schemas"]["ProjectReferenceModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Edit Tags for Project
   * @description Note:
   *
   *     Posted tags will replace any existing tags for the project.
   *     A new tag will be created, if the id for a tag not provided.
   *
   * Sample request:
   *
   *     POST /v0.1/companies/1/projects/19870/tags
   *     [
   *         {
   *             "name": "tag-name",
   *             "id": 2
   *         },
   *         {
   *             "name": "tag-test",
   *             "id": 1
   *         },
   *     ]
   */
  EditProjectTags: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
        /** @description Project Id */
        projectId: number;
      };
    };
    /** @description CompanyTagModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CompanyTagModel"][];
        "application/json": components["schemas"]["CompanyTagModel"][];
        "text/json": components["schemas"]["CompanyTagModel"][];
        "application/*+json": components["schemas"]["CompanyTagModel"][];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["ProjectModel"];
          "application/json": components["schemas"]["ProjectModel"];
          "text/json": components["schemas"]["ProjectModel"];
          "application/xml": components["schemas"]["ProjectModel"];
          "text/xml": components["schemas"]["ProjectModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Forbidden request */
      403: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get recruitment sources
   * @description Requires access level: CompanyRecruiter. Requires module: Recruitment.
   */
  RecruitmentSources: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["RecruitmentSourceModel"][];
          "application/json": components["schemas"]["RecruitmentSourceModel"][];
          "text/json": components["schemas"]["RecruitmentSourceModel"][];
          "application/xml": components["schemas"]["RecruitmentSourceModel"][];
          "text/xml": components["schemas"]["RecruitmentSourceModel"][];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company candidates list from search criteria
   * @description Sample request:
   *
   *     POST /v0.1/companies/1/candidates/search
   *     {
   *         "term": "candidate property value",
   *         "rating": 3
   *         "status": 0,
   *         "sources": [],
   *         "noRecruiter": false,
   *         "recruiters": [],
   *         "states": [0],
   *         "pipeline": null,
   *         "pageAndSortBy": {
   *             "page": 1,
   *             "itemsPerPage": 15
   *         },
   *         "pipelines": []
   *     }
   */
  SearchCompanyCandidate: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchCompanyCandidateQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchCompanyCandidateQueryModel"];
        "application/json": components["schemas"]["SearchCompanyCandidateQueryModel"];
        "text/json": components["schemas"]["SearchCompanyCandidateQueryModel"];
        "application/*+json": components["schemas"]["SearchCompanyCandidateQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchCompanyCandidateResultModel"];
          "application/json": components["schemas"]["SearchCompanyCandidateResultModel"];
          "text/json": components["schemas"]["SearchCompanyCandidateResultModel"];
          "application/xml": components["schemas"]["SearchCompanyCandidateResultModel"];
          "text/xml": components["schemas"]["SearchCompanyCandidateResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company customer contacts list from search criteria
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  SearchCompanyCustomerContact: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchCompanyCustomerQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchCompanyCustomerContactQueryModel"];
        "application/json": components["schemas"]["SearchCompanyCustomerContactQueryModel"];
        "text/json": components["schemas"]["SearchCompanyCustomerContactQueryModel"];
        "application/*+json": components["schemas"]["SearchCompanyCustomerContactQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchCompanyCustomerContactResultModel"];
          "application/json": components["schemas"]["SearchCompanyCustomerContactResultModel"];
          "text/json": components["schemas"]["SearchCompanyCustomerContactResultModel"];
          "application/xml": components["schemas"]["SearchCompanyCustomerContactResultModel"];
          "text/xml": components["schemas"]["SearchCompanyCustomerContactResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get company customers list from search criteria
   * @description Requires access level: CompanyManager. Requires module: Customers.
   */
  SearchCompanyCustomer: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchCompanyCustomerQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchCompanyCustomerQueryModel"];
        "application/json": components["schemas"]["SearchCompanyCustomerQueryModel"];
        "text/json": components["schemas"]["SearchCompanyCustomerQueryModel"];
        "application/*+json": components["schemas"]["SearchCompanyCustomerQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchCompanyCustomerResultModel"];
          "application/json": components["schemas"]["SearchCompanyCustomerResultModel"];
          "text/json": components["schemas"]["SearchCompanyCustomerResultModel"];
          "application/xml": components["schemas"]["SearchCompanyCustomerResultModel"];
          "text/xml": components["schemas"]["SearchCompanyCustomerResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get company users list from search criteria */
  SearchCompanyUser: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchCompanyUserQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchCompanyUserQueryModel"];
        "application/json": components["schemas"]["SearchCompanyUserQueryModel"];
        "text/json": components["schemas"]["SearchCompanyUserQueryModel"];
        "application/*+json": components["schemas"]["SearchCompanyUserQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchCompanyUserResultModel"];
          "application/json": components["schemas"]["SearchCompanyUserResultModel"];
          "text/json": components["schemas"]["SearchCompanyUserResultModel"];
          "application/xml": components["schemas"]["SearchCompanyUserResultModel"];
          "text/xml": components["schemas"]["SearchCompanyUserResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /**
   * Get projects list from search criteria
   * @description Sample request
   * {
   *     "pipelines": [4],
   *     "projectStates": [0],
   *     "PageAndSortBy": {
   *     "SortBy": "0",
   *     "SortOrder": "1",
   *     "Page": "1",
   *     "ItemsPerPage": "15",
   *     }
   * }
   * SortBy Parameter can be:
   *     CreatedDateTime=0 // Default
   *     Title=1
   *     Identifier=2
   *     CustomerIdentifier=3
   *     SeoId=4
   *     UpdatedDateTime=6
   *     LastTouchDateTime=7
   */
  SearchProject: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchCompanyCustomerQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchProjectQueryModel"];
        "application/json": components["schemas"]["SearchProjectQueryModel"];
        "text/json": components["schemas"]["SearchProjectQueryModel"];
        "application/*+json": components["schemas"]["SearchProjectQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchProjectsResultModel"];
          "application/json": components["schemas"]["SearchProjectsResultModel"];
          "text/json": components["schemas"]["SearchProjectsResultModel"];
          "application/xml": components["schemas"]["SearchProjectsResultModel"];
          "text/xml": components["schemas"]["SearchProjectsResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Search users by skill keyword id */
  SearchSkill: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SearchSkillQueryModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SearchSkillQueryModel"];
        "application/json": components["schemas"]["SearchSkillQueryModel"];
        "text/json": components["schemas"]["SearchSkillQueryModel"];
        "application/*+json": components["schemas"]["SearchSkillQueryModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchSkillResultModel"];
          "application/json": components["schemas"]["SearchSkillResultModel"];
          "text/json": components["schemas"]["SearchSkillResultModel"];
          "application/xml": components["schemas"]["SearchSkillResultModel"];
          "text/xml": components["schemas"]["SearchSkillResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Search users with skills by term (string value) */
  SearchSkillTerm: {
    parameters: {
      path: {
        /** @description Company Id */
        companyId: number;
      };
    };
    /** @description SkillSearchQueryTermModel */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SkillSearchQueryTermModel"];
        "application/json": components["schemas"]["SkillSearchQueryTermModel"];
        "text/json": components["schemas"]["SkillSearchQueryTermModel"];
        "application/*+json": components["schemas"]["SkillSearchQueryTermModel"];
      };
    };
    responses: {
      /** @description All went well */
      200: {
        content: {
          "text/plain": components["schemas"]["SearchSkillResultModel"];
          "application/json": components["schemas"]["SearchSkillResultModel"];
          "text/json": components["schemas"]["SearchSkillResultModel"];
          "application/xml": components["schemas"]["SearchSkillResultModel"];
          "text/xml": components["schemas"]["SearchSkillResultModel"];
        };
      };
      /** @description Incorrect request */
      400: {
        content: {
          "text/plain": components["schemas"]["ValidationModel"];
          "application/json": components["schemas"]["ValidationModel"];
          "text/json": components["schemas"]["ValidationModel"];
          "application/xml": components["schemas"]["ValidationModel"];
          "text/xml": components["schemas"]["ValidationModel"];
        };
      };
      /** @description Unauthorized request */
      401: never;
      /** @description Resource not found */
      404: never;
      /** @description Server error */
      500: {
        content: {
          "text/plain": components["schemas"]["ErrorModel"];
          "application/json": components["schemas"]["ErrorModel"];
          "text/json": components["schemas"]["ErrorModel"];
          "application/xml": components["schemas"]["ErrorModel"];
          "text/xml": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
};
